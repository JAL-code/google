# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"os.[\w]+|\bos.[\w\(\),\s].+\b"

test_str = ("\n"
	"exception os.error\n\n"
	"    An alias for the built-in OSError exception.\n\n"
	"os.name\n\n"
	"    The name of the operating system dependent module imported. The following names have currently been registered: 'posix', 'nt', 'java'.\n\n"
	"    See also\n\n"
	"    sys.platform has a finer granularity. os.uname() gives system-dependent version information.\n\n"
	"    The platform module provides detailed checks for the system’s identity.\n\n"
	"File Names, Command Line Arguments, and Environment Variables\n\n"
	"In Python, file names, command line arguments, and environment variables are represented using the string type. On some systems, decoding these strings to and from bytes is necessary before passing them to the operating system. Python uses the file system encoding to perform this conversion (see sys.getfilesystemencoding()).\n\n"
	"Changed in version 3.1: On some systems, conversion using the file system encoding may fail. In this case, Python uses the surrogateescape encoding error handler, which means that undecodable bytes are replaced by a Unicode character U+DCxx on decoding, and these are again translated to the original byte on encoding.\n\n"
	"The file system encoding must guarantee to successfully decode all bytes below 128. If the file system encoding fails to provide this guarantee, API functions may raise UnicodeErrors.\n"
	"Process Parameters\n\n"
	"These functions and data items provide information and operate on the current process and user.\n\n"
	"os.ctermid()\n\n"
	"    Return the filename corresponding to the controlling terminal of the process.\n\n"
	"    Availability: Unix.\n\n"
	"os.environ\n\n"
	"    A mapping object representing the string environment. For example, environ['HOME'] is the pathname of your home directory (on some platforms), and is equivalent to getenv(\"HOME\") in C.\n\n"
	"    This mapping is captured the first time the os module is imported, typically during Python startup as part of processing site.py. Changes to the environment made after this time are not reflected in os.environ, except for changes made by modifying os.environ directly.\n\n"
	"    This mapping may be used to modify the environment as well as query the environment. putenv() will be called automatically when the mapping is modified.\n\n"
	"    On Unix, keys and values use sys.getfilesystemencoding() and 'surrogateescape' error handler. Use environb if you would like to use a different encoding.\n\n"
	"    Note\n\n"
	"    Calling putenv() directly does not change os.environ, so it’s better to modify os.environ.\n\n"
	"    Note\n\n"
	"    On some platforms, including FreeBSD and Mac OS X, setting environ may cause memory leaks. Refer to the system documentation for putenv().\n\n"
	"    You can delete items in this mapping to unset environment variables. unsetenv() will be called automatically when an item is deleted from os.environ, and when one of the pop() or clear() methods is called.\n\n"
	"    Changed in version 3.9: Updated to support PEP 584’s merge (|) and update (|=) operators.\n\n"
	"os.environb\n\n"
	"    Bytes version of environ: a mapping object representing the environment as byte strings. environ and environb are synchronized (modify environb updates environ, and vice versa).\n\n"
	"    environb is only available if supports_bytes_environ is True.\n\n"
	"    New in version 3.2.\n\n"
	"    Changed in version 3.9: Updated to support PEP 584’s merge (|) and update (|=) operators.\n\n"
	"os.chdir(path)\n"
	"os.fchdir(fd)\n"
	"os.getcwd()\n\n"
	"    These functions are described in Files and Directories.\n\n"
	"os.fsencode(filename)\n\n"
	"    Encode path-like filename to the filesystem encoding with 'surrogateescape' error handler, or 'strict' on Windows; return bytes unchanged.\n\n"
	"    fsdecode() is the reverse function.\n\n"
	"    New in version 3.2.\n\n"
	"    Changed in version 3.6: Support added to accept objects implementing the os.PathLike interface.\n\n"
	"os.fsdecode(filename)\n\n"
	"    Decode the path-like filename from the filesystem encoding with 'surrogateescape' error handler, or 'strict' on Windows; return str unchanged.\n\n"
	"    fsencode() is the reverse function.\n\n"
	"    New in version 3.2.\n\n"
	"    Changed in version 3.6: Support added to accept objects implementing the os.PathLike interface.\n\n"
	"os.fspath(path)\n\n"
	"    Return the file system representation of the path.\n\n"
	"    If str or bytes is passed in, it is returned unchanged. Otherwise __fspath__() is called and its value is returned as long as it is a str or bytes object. In all other cases, TypeError is raised.\n\n"
	"    New in version 3.6.\n\n"
	"class os.PathLike\n\n"
	"    An abstract base class for objects representing a file system path, e.g. pathlib.PurePath.\n\n"
	"    New in version 3.6.\n\n"
	"    abstractmethod __fspath__()\n\n"
	"        Return the file system path representation of the object.\n\n"
	"        The method should only return a str or bytes object, with the preference being for str.\n\n"
	"os.getenv(key, default=None)\n\n"
	"    Return the value of the environment variable key if it exists, or default if it doesn’t. key, default and the result are str.\n\n"
	"    On Unix, keys and values are decoded with sys.getfilesystemencoding() and 'surrogateescape' error handler. Use os.getenvb() if you would like to use a different encoding.\n\n"
	"    Availability: most flavors of Unix, Windows.\n\n"
	"os.getenvb(key, default=None)\n\n"
	"    Return the value of the environment variable key if it exists, or default if it doesn’t. key, default and the result are bytes.\n\n"
	"    getenvb() is only available if supports_bytes_environ is True.\n\n"
	"    Availability: most flavors of Unix.\n\n"
	"    New in version 3.2.\n\n"
	"os.get_exec_path(env=None)\n\n"
	"    Returns the list of directories that will be searched for a named executable, similar to a shell, when launching a process. env, when specified, should be an environment variable dictionary to lookup the PATH in. By default, when env is None, environ is used.\n\n"
	"    New in version 3.2.\n\n"
	"os.getegid()\n\n"
	"    Return the effective group id of the current process. This corresponds to the “set id” bit on the file being executed in the current process.\n\n"
	"    Availability: Unix.\n\n"
	"os.geteuid()\n\n"
	"    Return the current process’s effective user id.\n\n"
	"    Availability: Unix.\n\n"
	"os.getgid()\n\n"
	"    Return the real group id of the current process.\n\n"
	"    Availability: Unix.\n\n"
	"os.getgrouplist(user, group)\n\n"
	"    Return list of group ids that user belongs to. If group is not in the list, it is included; typically, group is specified as the group ID field from the password record for user.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3.\n\n"
	"os.getgroups()\n\n"
	"    Return list of supplemental group ids associated with the current process.\n\n"
	"    Availability: Unix.\n\n"
	"    Note\n\n"
	"    On Mac OS X, getgroups() behavior differs somewhat from other Unix platforms. If the Python interpreter was built with a deployment target of 10.5 or earlier, getgroups() returns the list of effective group ids associated with the current user process; this list is limited to a system-defined number of entries, typically 16, and may be modified by calls to setgroups() if suitably privileged. If built with a deployment target greater than 10.5, getgroups() returns the current group access list for the user associated with the effective user id of the process; the group access list may change over the lifetime of the process, it is not affected by calls to setgroups(), and its length is not limited to 16. The deployment target value, MACOSX_DEPLOYMENT_TARGET, can be obtained with sysconfig.get_config_var().\n\n"
	"os.getlogin()\n\n"
	"    Return the name of the user logged in on the controlling terminal of the process. For most purposes, it is more useful to use getpass.getuser() since the latter checks the environment variables LOGNAME or USERNAME to find out who the user is, and falls back to pwd.getpwuid(os.getuid())[0] to get the login name of the current real user id.\n\n"
	"    Availability: Unix, Windows.\n\n"
	"os.getpgid(pid)\n\n"
	"    Return the process group id of the process with process id pid. If pid is 0, the process group id of the current process is returned.\n\n"
	"    Availability: Unix.\n\n"
	"os.getpgrp()\n\n"
	"    Return the id of the current process group.\n\n"
	"    Availability: Unix.\n\n"
	"os.getpid()\n\n"
	"    Return the current process id.\n\n"
	"os.getppid()\n\n"
	"    Return the parent’s process id. When the parent process has exited, on Unix the id returned is the one of the init process (1), on Windows it is still the same id, which may be already reused by another process.\n\n"
	"    Availability: Unix, Windows.\n\n"
	"    Changed in version 3.2: Added support for Windows.\n\n"
	"os.getpriority(which, who)\n\n"
	"    Get program scheduling priority. The value which is one of PRIO_PROCESS, PRIO_PGRP, or PRIO_USER, and who is interpreted relative to which (a process identifier for PRIO_PROCESS, process group identifier for PRIO_PGRP, and a user ID for PRIO_USER). A zero value for who denotes (respectively) the calling process, the process group of the calling process, or the real user ID of the calling process.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3.\n\n"
	"os.PRIO_PROCESS\n"
	"os.PRIO_PGRP\n"
	"os.PRIO_USER\n\n"
	"    Parameters for the getpriority() and setpriority() functions.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3.\n\n"
	"os.getresuid()\n\n"
	"    Return a tuple (ruid, euid, suid) denoting the current process’s real, effective, and saved user ids.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.2.\n\n"
	"os.getresgid()\n\n"
	"    Return a tuple (rgid, egid, sgid) denoting the current process’s real, effective, and saved group ids.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.2.\n\n"
	"os.getuid()\n\n"
	"    Return the current process’s real user id.\n\n"
	"    Availability: Unix.\n\n"
	"os.initgroups(username, gid)\n\n"
	"    Call the system initgroups() to initialize the group access list with all of the groups of which the specified username is a member, plus the specified group id.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.2.\n\n"
	"os.putenv(key, value)\n\n"
	"    Set the environment variable named key to the string value. Such changes to the environment affect subprocesses started with os.system(), popen() or fork() and execv().\n\n"
	"    Assignments to items in os.environ are automatically translated into corresponding calls to putenv(); however, calls to putenv() don’t update os.environ, so it is actually preferable to assign to items of os.environ.\n\n"
	"    Note\n\n"
	"    On some platforms, including FreeBSD and Mac OS X, setting environ may cause memory leaks. Refer to the system documentation for putenv().\n\n"
	"    Raises an auditing event os.putenv with arguments key, value.\n\n"
	"    Changed in version 3.9: The function is now always available.\n\n"
	"os.setegid(egid)\n\n"
	"    Set the current process’s effective group id.\n\n"
	"    Availability: Unix.\n\n"
	"os.seteuid(euid)\n\n"
	"    Set the current process’s effective user id.\n\n"
	"    Availability: Unix.\n\n"
	"os.setgid(gid)\n\n"
	"    Set the current process’ group id.\n\n"
	"    Availability: Unix.\n\n"
	"os.setgroups(groups)\n\n"
	"    Set the list of supplemental group ids associated with the current process to groups. groups must be a sequence, and each element must be an integer identifying a group. This operation is typically available only to the superuser.\n\n"
	"    Availability: Unix.\n\n"
	"    Note\n\n"
	"    On Mac OS X, the length of groups may not exceed the system-defined maximum number of effective group ids, typically 16. See the documentation for getgroups() for cases where it may not return the same group list set by calling setgroups().\n\n"
	"os.setpgrp()\n\n"
	"    Call the system call setpgrp() or setpgrp(0, 0) depending on which version is implemented (if any). See the Unix manual for the semantics.\n\n"
	"    Availability: Unix.\n\n"
	"os.setpgid(pid, pgrp)\n\n"
	"    Call the system call setpgid() to set the process group id of the process with id pid to the process group with id pgrp. See the Unix manual for the semantics.\n\n"
	"    Availability: Unix.\n\n"
	"os.setpriority(which, who, priority)\n\n"
	"    Set program scheduling priority. The value which is one of PRIO_PROCESS, PRIO_PGRP, or PRIO_USER, and who is interpreted relative to which (a process identifier for PRIO_PROCESS, process group identifier for PRIO_PGRP, and a user ID for PRIO_USER). A zero value for who denotes (respectively) the calling process, the process group of the calling process, or the real user ID of the calling process. priority is a value in the range -20 to 19. The default priority is 0; lower priorities cause more favorable scheduling.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3.\n\n"
	"os.setregid(rgid, egid)\n\n"
	"    Set the current process’s real and effective group ids.\n\n"
	"    Availability: Unix.\n\n"
	"os.setresgid(rgid, egid, sgid)\n\n"
	"    Set the current process’s real, effective, and saved group ids.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.2.\n\n"
	"os.setresuid(ruid, euid, suid)\n\n"
	"    Set the current process’s real, effective, and saved user ids.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.2.\n\n"
	"os.setreuid(ruid, euid)\n\n"
	"    Set the current process’s real and effective user ids.\n\n"
	"    Availability: Unix.\n\n"
	"os.getsid(pid)\n\n"
	"    Call the system call getsid(). See the Unix manual for the semantics.\n\n"
	"    Availability: Unix.\n\n"
	"os.setsid()\n\n"
	"    Call the system call setsid(). See the Unix manual for the semantics.\n\n"
	"    Availability: Unix.\n\n"
	"os.setuid(uid)\n\n"
	"    Set the current process’s user id.\n\n"
	"    Availability: Unix.\n\n"
	"os.strerror(code)\n\n"
	"    Return the error message corresponding to the error code in code. On platforms where strerror() returns NULL when given an unknown error number, ValueError is raised.\n\n"
	"os.supports_bytes_environ\n\n"
	"    True if the native OS type of the environment is bytes (eg. False on Windows).\n\n"
	"    New in version 3.2.\n\n"
	"os.umask(mask)\n\n"
	"    Set the current numeric umask and return the previous umask.\n\n"
	"os.uname()\n\n"
	"    Returns information identifying the current operating system. The return value is an object with five attributes:\n\n"
	"        sysname - operating system name\n\n"
	"        nodename - name of machine on network (implementation-defined)\n\n"
	"        release - operating system release\n\n"
	"        version - operating system version\n\n"
	"        machine - hardware identifier\n\n"
	"    For backwards compatibility, this object is also iterable, behaving like a five-tuple containing sysname, nodename, release, version, and machine in that order.\n\n"
	"    Some systems truncate nodename to 8 characters or to the leading component; a better way to get the hostname is socket.gethostname() or even socket.gethostbyaddr(socket.gethostname()).\n\n"
	"    Availability: recent flavors of Unix.\n\n"
	"    Changed in version 3.3: Return type changed from a tuple to a tuple-like object with named attributes.\n\n"
	"os.unsetenv(key)\n\n"
	"    Unset (delete) the environment variable named key. Such changes to the environment affect subprocesses started with os.system(), popen() or fork() and execv().\n\n"
	"    Deletion of items in os.environ is automatically translated into a corresponding call to unsetenv(); however, calls to unsetenv() don’t update os.environ, so it is actually preferable to delete items of os.environ.\n\n"
	"    Raises an auditing event os.unsetenv with argument key.\n\n"
	"    Changed in version 3.9: The function is now always available and is also available on Windows.\n\n"
	"File Object Creation\n\n"
	"These functions create new file objects. (See also open() for opening file descriptors.)\n\n"
	"os.fdopen(fd, *args, **kwargs)\n\n"
	"    Return an open file object connected to the file descriptor fd. This is an alias of the open() built-in function and accepts the same arguments. The only difference is that the first argument of fdopen() must always be an integer.\n\n"
	"File Descriptor Operations\n\n"
	"These functions operate on I/O streams referenced using file descriptors.\n\n"
	"File descriptors are small integers corresponding to a file that has been opened by the current process. For example, standard input is usually file descriptor 0, standard output is 1, and standard error is 2. Further files opened by a process will then be assigned 3, 4, 5, and so forth. The name “file descriptor” is slightly deceptive; on Unix platforms, sockets and pipes are also referenced by file descriptors.\n\n"
	"The fileno() method can be used to obtain the file descriptor associated with a file object when required. Note that using the file descriptor directly will bypass the file object methods, ignoring aspects such as internal buffering of data.\n\n"
	"os.close(fd)\n\n"
	"    Close file descriptor fd.\n\n"
	"    Note\n\n"
	"    This function is intended for low-level I/O and must be applied to a file descriptor as returned by os.open() or pipe(). To close a “file object” returned by the built-in function open() or by popen() or fdopen(), use its close() method.\n\n"
	"os.closerange(fd_low, fd_high)\n\n"
	"    Close all file descriptors from fd_low (inclusive) to fd_high (exclusive), ignoring errors. Equivalent to (but much faster than):\n\n"
	"    for fd in range(fd_low, fd_high):\n"
	"        try:\n"
	"            os.close(fd)\n"
	"        except OSError:\n"
	"            pass\n\n"
	"os.copy_file_range(src, dst, count, offset_src=None, offset_dst=None)\n\n"
	"    Copy count bytes from file descriptor src, starting from offset offset_src, to file descriptor dst, starting from offset offset_dst. If offset_src is None, then src is read from the current position; respectively for offset_dst. The files pointed by src and dst must reside in the same filesystem, otherwise an OSError is raised with errno set to errno.EXDEV.\n\n"
	"    This copy is done without the additional cost of transferring data from the kernel to user space and then back into the kernel. Additionally, some filesystems could implement extra optimizations. The copy is done as if both files are opened as binary.\n\n"
	"    The return value is the amount of bytes copied. This could be less than the amount requested.\n\n"
	"    Availability: Linux kernel >= 4.5 or glibc >= 2.27.\n\n"
	"    New in version 3.8.\n\n"
	"os.device_encoding(fd)\n\n"
	"    Return a string describing the encoding of the device associated with fd if it is connected to a terminal; else return None.\n\n"
	"os.dup(fd)\n\n"
	"    Return a duplicate of file descriptor fd. The new file descriptor is non-inheritable.\n\n"
	"    On Windows, when duplicating a standard stream (0: stdin, 1: stdout, 2: stderr), the new file descriptor is inheritable.\n\n"
	"    Changed in version 3.4: The new file descriptor is now non-inheritable.\n\n"
	"os.dup2(fd, fd2, inheritable=True)\n\n"
	"    Duplicate file descriptor fd to fd2, closing the latter first if necessary. Return fd2. The new file descriptor is inheritable by default or non-inheritable if inheritable is False.\n\n"
	"    Changed in version 3.4: Add the optional inheritable parameter.\n\n"
	"    Changed in version 3.7: Return fd2 on success. Previously, None was always returned.\n\n"
	"os.fchmod(fd, mode)\n\n"
	"    Change the mode of the file given by fd to the numeric mode. See the docs for chmod() for possible values of mode. As of Python 3.3, this is equivalent to os.chmod(fd, mode).\n\n"
	"    Raises an auditing event os.chmod with arguments path, mode, dir_fd.\n\n"
	"    Availability: Unix.\n\n"
	"os.fchown(fd, uid, gid)\n\n"
	"    Change the owner and group id of the file given by fd to the numeric uid and gid. To leave one of the ids unchanged, set it to -1. See chown(). As of Python 3.3, this is equivalent to os.chown(fd, uid, gid).\n\n"
	"    Raises an auditing event os.chown with arguments path, uid, gid, dir_fd.\n\n"
	"    Availability: Unix.\n\n"
	"os.fdatasync(fd)\n\n"
	"    Force write of file with filedescriptor fd to disk. Does not force update of metadata.\n\n"
	"    Availability: Unix.\n\n"
	"    Note\n\n"
	"    This function is not available on MacOS.\n\n"
	"os.fpathconf(fd, name)\n\n"
	"    Return system configuration information relevant to an open file. name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX.1, Unix 95, Unix 98, and others). Some platforms define additional names as well. The names known to the host operating system are given in the pathconf_names dictionary. For configuration variables not included in that mapping, passing an integer for name is also accepted.\n\n"
	"    If name is a string and is not known, ValueError is raised. If a specific value for name is not supported by the host system, even if it is included in pathconf_names, an OSError is raised with errno.EINVAL for the error number.\n\n"
	"    As of Python 3.3, this is equivalent to os.pathconf(fd, name).\n\n"
	"    Availability: Unix.\n\n"
	"os.fstat(fd)\n\n"
	"    Get the status of the file descriptor fd. Return a stat_result object.\n\n"
	"    As of Python 3.3, this is equivalent to os.stat(fd).\n\n"
	"    See also\n\n"
	"    The stat() function.\n\n"
	"os.fstatvfs(fd)\n\n"
	"    Return information about the filesystem containing the file associated with file descriptor fd, like statvfs(). As of Python 3.3, this is equivalent to os.statvfs(fd).\n\n"
	"    Availability: Unix.\n\n"
	"os.fsync(fd)\n\n"
	"    Force write of file with filedescriptor fd to disk. On Unix, this calls the native fsync() function; on Windows, the MS _commit() function.\n\n"
	"    If you’re starting with a buffered Python file object f, first do f.flush(), and then do os.fsync(f.fileno()), to ensure that all internal buffers associated with f are written to disk.\n\n"
	"    Availability: Unix, Windows.\n\n"
	"os.ftruncate(fd, length)\n\n"
	"    Truncate the file corresponding to file descriptor fd, so that it is at most length bytes in size. As of Python 3.3, this is equivalent to os.truncate(fd, length).\n\n"
	"    Raises an auditing event os.truncate with arguments fd, length.\n\n"
	"    Availability: Unix, Windows.\n\n"
	"    Changed in version 3.5: Added support for Windows\n\n"
	"os.get_blocking(fd)\n\n"
	"    Get the blocking mode of the file descriptor: False if the O_NONBLOCK flag is set, True if the flag is cleared.\n\n"
	"    See also set_blocking() and socket.socket.setblocking().\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.5.\n\n"
	"os.isatty(fd)\n\n"
	"    Return True if the file descriptor fd is open and connected to a tty(-like) device, else False.\n\n"
	"os.lockf(fd, cmd, len)\n\n"
	"    Apply, test or remove a POSIX lock on an open file descriptor. fd is an open file descriptor. cmd specifies the command to use - one of F_LOCK, F_TLOCK, F_ULOCK or F_TEST. len specifies the section of the file to lock.\n\n"
	"    Raises an auditing event os.lockf with arguments fd, cmd, len.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3.\n\n"
	"os.F_LOCK\n"
	"os.F_TLOCK\n"
	"os.F_ULOCK\n"
	"os.F_TEST\n\n"
	"    Flags that specify what action lockf() will take.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3.\n\n"
	"os.lseek(fd, pos, how)\n\n"
	"    Set the current position of file descriptor fd to position pos, modified by how: SEEK_SET or 0 to set the position relative to the beginning of the file; SEEK_CUR or 1 to set it relative to the current position; SEEK_END or 2 to set it relative to the end of the file. Return the new cursor position in bytes, starting from the beginning.\n\n"
	"os.SEEK_SET\n"
	"os.SEEK_CUR\n"
	"os.SEEK_END\n\n"
	"    Parameters to the lseek() function. Their values are 0, 1, and 2, respectively.\n\n"
	"    New in version 3.3: Some operating systems could support additional values, like os.SEEK_HOLE or os.SEEK_DATA.\n\n"
	"os.open(path, flags, mode=0o777, *, dir_fd=None)\n\n"
	"    Open the file path and set various flags according to flags and possibly its mode according to mode. When computing mode, the current umask value is first masked out. Return the file descriptor for the newly opened file. The new file descriptor is non-inheritable.\n\n"
	"    For a description of the flag and mode values, see the C run-time documentation; flag constants (like O_RDONLY and O_WRONLY) are defined in the os module. In particular, on Windows adding O_BINARY is needed to open files in binary mode.\n\n"
	"    This function can support paths relative to directory descriptors with the dir_fd parameter.\n\n"
	"    Raises an auditing event open with arguments path, mode, flags.\n\n"
	"    Changed in version 3.4: The new file descriptor is now non-inheritable.\n\n"
	"    Note\n\n"
	"    This function is intended for low-level I/O. For normal usage, use the built-in function open(), which returns a file object with read() and write() methods (and many more). To wrap a file descriptor in a file object, use fdopen().\n\n"
	"    New in version 3.3: The dir_fd argument.\n\n"
	"    Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an InterruptedError exception (see PEP 475 for the rationale).\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"The following constants are options for the flags parameter to the open() function. They can be combined using the bitwise OR operator |. Some of them are not available on all platforms. For descriptions of their availability and use, consult the open(2) manual page on Unix or the MSDN on Windows.\n\n"
	"os.O_RDONLY\n"
	"os.O_WRONLY\n"
	"os.O_RDWR\n"
	"os.O_APPEND\n"
	"os.O_CREAT\n"
	"os.O_EXCL\n"
	"os.O_TRUNC\n\n"
	"    The above constants are available on Unix and Windows.\n\n"
	"os.O_DSYNC\n"
	"os.O_RSYNC\n"
	"os.O_SYNC\n"
	"os.O_NDELAY\n"
	"os.O_NONBLOCK\n"
	"os.O_NOCTTY\n"
	"os.O_CLOEXEC\n\n"
	"    The above constants are only available on Unix.\n\n"
	"    Changed in version 3.3: Add O_CLOEXEC constant.\n\n"
	"os.O_BINARY\n"
	"os.O_NOINHERIT\n"
	"os.O_SHORT_LIVED\n"
	"os.O_TEMPORARY\n"
	"os.O_RANDOM\n"
	"os.O_SEQUENTIAL\n"
	"os.O_TEXT\n\n"
	"    The above constants are only available on Windows.\n\n"
	"os.O_ASYNC\n"
	"os.O_DIRECT\n"
	"os.O_DIRECTORY\n"
	"os.O_NOFOLLOW\n"
	"os.O_NOATIME\n"
	"os.O_PATH\n"
	"os.O_TMPFILE\n"
	"os.O_SHLOCK\n"
	"os.O_EXLOCK\n\n"
	"    The above constants are extensions and not present if they are not defined by the C library.\n\n"
	"    Changed in version 3.4: Add O_PATH on systems that support it. Add O_TMPFILE, only available on Linux Kernel 3.11 or newer.\n\n"
	"os.openpty()\n\n"
	"    Open a new pseudo-terminal pair. Return a pair of file descriptors (master, slave) for the pty and the tty, respectively. The new file descriptors are non-inheritable. For a (slightly) more portable approach, use the pty module.\n\n"
	"    Availability: some flavors of Unix.\n\n"
	"    Changed in version 3.4: The new file descriptors are now non-inheritable.\n\n"
	"os.pipe()\n\n"
	"    Create a pipe. Return a pair of file descriptors (r, w) usable for reading and writing, respectively. The new file descriptor is non-inheritable.\n\n"
	"    Availability: Unix, Windows.\n\n"
	"    Changed in version 3.4: The new file descriptors are now non-inheritable.\n\n"
	"os.pipe2(flags)\n\n"
	"    Create a pipe with flags set atomically. flags can be constructed by ORing together one or more of these values: O_NONBLOCK, O_CLOEXEC. Return a pair of file descriptors (r, w) usable for reading and writing, respectively.\n\n"
	"    Availability: some flavors of Unix.\n\n"
	"    New in version 3.3.\n\n"
	"os.posix_fallocate(fd, offset, len)\n\n"
	"    Ensures that enough disk space is allocated for the file specified by fd starting from offset and continuing for len bytes.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3.\n\n"
	"os.posix_fadvise(fd, offset, len, advice)\n\n"
	"    Announces an intention to access data in a specific pattern thus allowing the kernel to make optimizations. The advice applies to the region of the file specified by fd starting at offset and continuing for len bytes. advice is one of POSIX_FADV_NORMAL, POSIX_FADV_SEQUENTIAL, POSIX_FADV_RANDOM, POSIX_FADV_NOREUSE, POSIX_FADV_WILLNEED or POSIX_FADV_DONTNEED.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3.\n\n"
	"os.POSIX_FADV_NORMAL\n"
	"os.POSIX_FADV_SEQUENTIAL\n"
	"os.POSIX_FADV_RANDOM\n"
	"os.POSIX_FADV_NOREUSE\n"
	"os.POSIX_FADV_WILLNEED\n"
	"os.POSIX_FADV_DONTNEED\n\n"
	"    Flags that can be used in advice in posix_fadvise() that specify the access pattern that is likely to be used.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3.\n\n"
	"os.pread(fd, n, offset)\n\n"
	"    Read at most n bytes from file descriptor fd at a position of offset, leaving the file offset unchanged.\n\n"
	"    Return a bytestring containing the bytes read. If the end of the file referred to by fd has been reached, an empty bytes object is returned.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3.\n\n"
	"os.preadv(fd, buffers, offset, flags=0)\n\n"
	"    Read from a file descriptor fd at a position of offset into mutable bytes-like objects buffers, leaving the file offset unchanged. Transfer data into each buffer until it is full and then move on to the next buffer in the sequence to hold the rest of the data.\n\n"
	"    The flags argument contains a bitwise OR of zero or more of the following flags:\n\n"
	"        RWF_HIPRI\n\n"
	"        RWF_NOWAIT\n\n"
	"    Return the total number of bytes actually read which can be less than the total capacity of all the objects.\n\n"
	"    The operating system may set a limit (sysconf() value 'SC_IOV_MAX') on the number of buffers that can be used.\n\n"
	"    Combine the functionality of os.readv() and os.pread().\n\n"
	"    Availability: Linux 2.6.30 and newer, FreeBSD 6.0 and newer, OpenBSD 2.7 and newer, AIX 7.1 and newer. Using flags requires Linux 4.6 or newer.\n\n"
	"    New in version 3.7.\n\n"
	"os.RWF_NOWAIT\n\n"
	"    Do not wait for data which is not immediately available. If this flag is specified, the system call will return instantly if it would have to read data from the backing storage or wait for a lock.\n\n"
	"    If some data was successfully read, it will return the number of bytes read. If no bytes were read, it will return -1 and set errno to errno.EAGAIN.\n\n"
	"    Availability: Linux 4.14 and newer.\n\n"
	"    New in version 3.7.\n\n"
	"os.RWF_HIPRI\n\n"
	"    High priority read/write. Allows block-based filesystems to use polling of the device, which provides lower latency, but may use additional resources.\n\n"
	"    Currently, on Linux, this feature is usable only on a file descriptor opened using the O_DIRECT flag.\n\n"
	"    Availability: Linux 4.6 and newer.\n\n"
	"    New in version 3.7.\n\n"
	"os.pwrite(fd, str, offset)\n\n"
	"    Write the bytestring in str to file descriptor fd at position of offset, leaving the file offset unchanged.\n\n"
	"    Return the number of bytes actually written.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3.\n\n"
	"os.pwritev(fd, buffers, offset, flags=0)\n\n"
	"    Write the buffers contents to file descriptor fd at a offset offset, leaving the file offset unchanged. buffers must be a sequence of bytes-like objects. Buffers are processed in array order. Entire contents of the first buffer is written before proceeding to the second, and so on.\n\n"
	"    The flags argument contains a bitwise OR of zero or more of the following flags:\n\n"
	"        RWF_DSYNC\n\n"
	"        RWF_SYNC\n\n"
	"    Return the total number of bytes actually written.\n\n"
	"    The operating system may set a limit (sysconf() value 'SC_IOV_MAX') on the number of buffers that can be used.\n\n"
	"    Combine the functionality of os.writev() and os.pwrite().\n\n"
	"    Availability: Linux 2.6.30 and newer, FreeBSD 6.0 and newer, OpenBSD 2.7 and newer, AIX 7.1 and newer. Using flags requires Linux 4.7 or newer.\n\n"
	"    New in version 3.7.\n\n"
	"os.RWF_DSYNC\n\n"
	"    Provide a per-write equivalent of the O_DSYNC open(2) flag. This flag effect applies only to the data range written by the system call.\n\n"
	"    Availability: Linux 4.7 and newer.\n\n"
	"    New in version 3.7.\n\n"
	"os.RWF_SYNC\n\n"
	"    Provide a per-write equivalent of the O_SYNC open(2) flag. This flag effect applies only to the data range written by the system call.\n\n"
	"    Availability: Linux 4.7 and newer.\n\n"
	"    New in version 3.7.\n\n"
	"os.read(fd, n)\n\n"
	"    Read at most n bytes from file descriptor fd.\n\n"
	"    Return a bytestring containing the bytes read. If the end of the file referred to by fd has been reached, an empty bytes object is returned.\n\n"
	"    Note\n\n"
	"    This function is intended for low-level I/O and must be applied to a file descriptor as returned by os.open() or pipe(). To read a “file object” returned by the built-in function open() or by popen() or fdopen(), or sys.stdin, use its read() or readline() methods.\n\n"
	"    Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an InterruptedError exception (see PEP 475 for the rationale).\n\n"
	"os.sendfile(out_fd, in_fd, offset, count)\n"
	"os.sendfile(out_fd, in_fd, offset, count, headers=(), trailers=(), flags=0)\n\n"
	"    Copy count bytes from file descriptor in_fd to file descriptor out_fd starting at offset. Return the number of bytes sent. When EOF is reached return 0.\n\n"
	"    The first function notation is supported by all platforms that define sendfile().\n\n"
	"    On Linux, if offset is given as None, the bytes are read from the current position of in_fd and the position of in_fd is updated.\n\n"
	"    The second case may be used on Mac OS X and FreeBSD where headers and trailers are arbitrary sequences of buffers that are written before and after the data from in_fd is written. It returns the same as the first case.\n\n"
	"    On Mac OS X and FreeBSD, a value of 0 for count specifies to send until the end of in_fd is reached.\n\n"
	"    All platforms support sockets as out_fd file descriptor, and some platforms allow other types (e.g. regular file, pipe) as well.\n\n"
	"    Cross-platform applications should not use headers, trailers and flags arguments.\n\n"
	"    Availability: Unix.\n\n"
	"    Note\n\n"
	"    For a higher-level wrapper of sendfile(), see socket.socket.sendfile().\n\n"
	"    New in version 3.3.\n\n"
	"    Changed in version 3.9: Parameters out and in was renamed to out_fd and in_fd.\n\n"
	"os.set_blocking(fd, blocking)\n\n"
	"    Set the blocking mode of the specified file descriptor. Set the O_NONBLOCK flag if blocking is False, clear the flag otherwise.\n\n"
	"    See also get_blocking() and socket.socket.setblocking().\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.5.\n\n"
	"os.SF_NODISKIO\n"
	"os.SF_MNOWAIT\n"
	"os.SF_SYNC\n\n"
	"    Parameters to the sendfile() function, if the implementation supports them.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3.\n\n"
	"os.readv(fd, buffers)\n\n"
	"    Read from a file descriptor fd into a number of mutable bytes-like objects buffers. Transfer data into each buffer until it is full and then move on to the next buffer in the sequence to hold the rest of the data.\n\n"
	"    Return the total number of bytes actually read which can be less than the total capacity of all the objects.\n\n"
	"    The operating system may set a limit (sysconf() value 'SC_IOV_MAX') on the number of buffers that can be used.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3.\n\n"
	"os.tcgetpgrp(fd)\n\n"
	"    Return the process group associated with the terminal given by fd (an open file descriptor as returned by os.open()).\n\n"
	"    Availability: Unix.\n\n"
	"os.tcsetpgrp(fd, pg)\n\n"
	"    Set the process group associated with the terminal given by fd (an open file descriptor as returned by os.open()) to pg.\n\n"
	"    Availability: Unix.\n\n"
	"os.ttyname(fd)\n\n"
	"    Return a string which specifies the terminal device associated with file descriptor fd. If fd is not associated with a terminal device, an exception is raised.\n\n"
	"    Availability: Unix.\n\n"
	"os.write(fd, str)\n\n"
	"    Write the bytestring in str to file descriptor fd.\n\n"
	"    Return the number of bytes actually written.\n\n"
	"    Note\n\n"
	"    This function is intended for low-level I/O and must be applied to a file descriptor as returned by os.open() or pipe(). To write a “file object” returned by the built-in function open() or by popen() or fdopen(), or sys.stdout or sys.stderr, use its write() method.\n\n"
	"    Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an InterruptedError exception (see PEP 475 for the rationale).\n\n"
	"os.writev(fd, buffers)\n\n"
	"    Write the contents of buffers to file descriptor fd. buffers must be a sequence of bytes-like objects. Buffers are processed in array order. Entire contents of the first buffer is written before proceeding to the second, and so on.\n\n"
	"    Returns the total number of bytes actually written.\n\n"
	"    The operating system may set a limit (sysconf() value 'SC_IOV_MAX') on the number of buffers that can be used.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3.\n\n"
	"Querying the size of a terminal\n\n"
	"New in version 3.3.\n\n"
	"os.get_terminal_size(fd=STDOUT_FILENO)\n\n"
	"    Return the size of the terminal window as (columns, lines), tuple of type terminal_size.\n\n"
	"    The optional argument fd (default STDOUT_FILENO, or standard output) specifies which file descriptor should be queried.\n\n"
	"    If the file descriptor is not connected to a terminal, an OSError is raised.\n\n"
	"    shutil.get_terminal_size() is the high-level function which should normally be used, os.get_terminal_size is the low-level implementation.\n\n"
	"    Availability: Unix, Windows.\n\n"
	"class os.terminal_size\n\n"
	"    A subclass of tuple, holding (columns, lines) of the terminal window size.\n\n"
	"    columns\n\n"
	"        Width of the terminal window in characters.\n\n"
	"    lines\n\n"
	"        Height of the terminal window in characters.\n\n"
	"Inheritance of File Descriptors\n\n"
	"New in version 3.4.\n\n"
	"A file descriptor has an “inheritable” flag which indicates if the file descriptor can be inherited by child processes. Since Python 3.4, file descriptors created by Python are non-inheritable by default.\n\n"
	"On UNIX, non-inheritable file descriptors are closed in child processes at the execution of a new program, other file descriptors are inherited.\n\n"
	"On Windows, non-inheritable handles and file descriptors are closed in child processes, except for standard streams (file descriptors 0, 1 and 2: stdin, stdout and stderr), which are always inherited. Using spawn* functions, all inheritable handles and all inheritable file descriptors are inherited. Using the subprocess module, all file descriptors except standard streams are closed, and inheritable handles are only inherited if the close_fds parameter is False.\n\n"
	"os.get_inheritable(fd)\n\n"
	"    Get the “inheritable” flag of the specified file descriptor (a boolean).\n\n"
	"os.set_inheritable(fd, inheritable)\n\n"
	"    Set the “inheritable” flag of the specified file descriptor.\n\n"
	"os.get_handle_inheritable(handle)\n\n"
	"    Get the “inheritable” flag of the specified handle (a boolean).\n\n"
	"    Availability: Windows.\n\n"
	"os.set_handle_inheritable(handle, inheritable)\n\n"
	"    Set the “inheritable” flag of the specified handle.\n\n"
	"    Availability: Windows.\n\n"
	"Files and Directories\n\n"
	"On some Unix platforms, many of these functions support one or more of these features:\n\n"
	"    specifying a file descriptor: Normally the path argument provided to functions in the os module must be a string specifying a file path. However, some functions now alternatively accept an open file descriptor for their path argument. The function will then operate on the file referred to by the descriptor. (For POSIX systems, Python will call the variant of the function prefixed with f (e.g. call fchdir instead of chdir).)\n\n"
	"    You can check whether or not path can be specified as a file descriptor for a particular function on your platform using os.supports_fd. If this functionality is unavailable, using it will raise a NotImplementedError.\n\n"
	"    If the function also supports dir_fd or follow_symlinks arguments, it’s an error to specify one of those when supplying path as a file descriptor.\n\n"
	"    paths relative to directory descriptors: If dir_fd is not None, it should be a file descriptor referring to a directory, and the path to operate on should be relative; path will then be relative to that directory. If the path is absolute, dir_fd is ignored. (For POSIX systems, Python will call the variant of the function with an at suffix and possibly prefixed with f (e.g. call faccessat instead of access).\n\n"
	"    You can check whether or not dir_fd is supported for a particular function on your platform using os.supports_dir_fd. If it’s unavailable, using it will raise a NotImplementedError.\n\n"
	"    not following symlinks: If follow_symlinks is False, and the last element of the path to operate on is a symbolic link, the function will operate on the symbolic link itself rather than the file pointed to by the link. (For POSIX systems, Python will call the l... variant of the function.)\n\n"
	"    You can check whether or not follow_symlinks is supported for a particular function on your platform using os.supports_follow_symlinks. If it’s unavailable, using it will raise a NotImplementedError.\n\n"
	"os.access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True)\n\n"
	"    Use the real uid/gid to test for access to path. Note that most operations will use the effective uid/gid, therefore this routine can be used in a suid/sgid environment to test if the invoking user has the specified access to path. mode should be F_OK to test the existence of path, or it can be the inclusive OR of one or more of R_OK, W_OK, and X_OK to test permissions. Return True if access is allowed, False if not. See the Unix man page access(2) for more information.\n\n"
	"    This function can support specifying paths relative to directory descriptors and not following symlinks.\n\n"
	"    If effective_ids is True, access() will perform its access checks using the effective uid/gid instead of the real uid/gid. effective_ids may not be supported on your platform; you can check whether or not it is available using os.supports_effective_ids. If it is unavailable, using it will raise a NotImplementedError.\n\n"
	"    Note\n\n"
	"    Using access() to check if a user is authorized to e.g. open a file before actually doing so using open() creates a security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it. It’s preferable to use EAFP techniques. For example:\n\n"
	"    if os.access(\"myfile\", os.R_OK):\n"
	"        with open(\"myfile\") as fp:\n"
	"            return fp.read()\n"
	"    return \"some default data\"\n\n"
	"    is better written as:\n\n"
	"    try:\n"
	"        fp = open(\"myfile\")\n"
	"    except PermissionError:\n"
	"        return \"some default data\"\n"
	"    else:\n"
	"        with fp:\n"
	"            return fp.read()\n\n"
	"    Note\n\n"
	"    I/O operations may fail even when access() indicates that they would succeed, particularly for operations on network filesystems which may have permissions semantics beyond the usual POSIX permission-bit model.\n\n"
	"    Changed in version 3.3: Added the dir_fd, effective_ids, and follow_symlinks parameters.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.F_OK\n"
	"os.R_OK\n"
	"os.W_OK\n"
	"os.X_OK\n\n"
	"    Values to pass as the mode parameter of access() to test the existence, readability, writability and executability of path, respectively.\n\n"
	"os.chdir(path)\n\n"
	"    Change the current working directory to path.\n\n"
	"    This function can support specifying a file descriptor. The descriptor must refer to an opened directory, not an open file.\n\n"
	"    This function can raise OSError and subclasses such as FileNotFoundError, PermissionError, and NotADirectoryError.\n\n"
	"    Raises an auditing event os.chdir with argument path.\n\n"
	"    New in version 3.3: Added support for specifying path as a file descriptor on some platforms.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.chflags(path, flags, *, follow_symlinks=True)\n\n"
	"    Set the flags of path to the numeric flags. flags may take a combination (bitwise OR) of the following values (as defined in the stat module):\n\n"
	"        stat.UF_NODUMP\n\n"
	"        stat.UF_IMMUTABLE\n\n"
	"        stat.UF_APPEND\n\n"
	"        stat.UF_OPAQUE\n\n"
	"        stat.UF_NOUNLINK\n\n"
	"        stat.UF_COMPRESSED\n\n"
	"        stat.UF_HIDDEN\n\n"
	"        stat.SF_ARCHIVED\n\n"
	"        stat.SF_IMMUTABLE\n\n"
	"        stat.SF_APPEND\n\n"
	"        stat.SF_NOUNLINK\n\n"
	"        stat.SF_SNAPSHOT\n\n"
	"    This function can support not following symlinks.\n\n"
	"    Raises an auditing event os.chflags with arguments path, flags.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3: The follow_symlinks argument.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.chmod(path, mode, *, dir_fd=None, follow_symlinks=True)\n\n"
	"    Change the mode of path to the numeric mode. mode may take one of the following values (as defined in the stat module) or bitwise ORed combinations of them:\n\n"
	"        stat.S_ISUID\n\n"
	"        stat.S_ISGID\n\n"
	"        stat.S_ENFMT\n\n"
	"        stat.S_ISVTX\n\n"
	"        stat.S_IREAD\n\n"
	"        stat.S_IWRITE\n\n"
	"        stat.S_IEXEC\n\n"
	"        stat.S_IRWXU\n\n"
	"        stat.S_IRUSR\n\n"
	"        stat.S_IWUSR\n\n"
	"        stat.S_IXUSR\n\n"
	"        stat.S_IRWXG\n\n"
	"        stat.S_IRGRP\n\n"
	"        stat.S_IWGRP\n\n"
	"        stat.S_IXGRP\n\n"
	"        stat.S_IRWXO\n\n"
	"        stat.S_IROTH\n\n"
	"        stat.S_IWOTH\n\n"
	"        stat.S_IXOTH\n\n"
	"    This function can support specifying a file descriptor, paths relative to directory descriptors and not following symlinks.\n\n"
	"    Note\n\n"
	"    Although Windows supports chmod(), you can only set the file’s read-only flag with it (via the stat.S_IWRITE and stat.S_IREAD constants or a corresponding integer value). All other bits are ignored.\n\n"
	"    Raises an auditing event os.chmod with arguments path, mode, dir_fd.\n\n"
	"    New in version 3.3: Added support for specifying path as an open file descriptor, and the dir_fd and follow_symlinks arguments.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.chown(path, uid, gid, *, dir_fd=None, follow_symlinks=True)\n\n"
	"    Change the owner and group id of path to the numeric uid and gid. To leave one of the ids unchanged, set it to -1.\n\n"
	"    This function can support specifying a file descriptor, paths relative to directory descriptors and not following symlinks.\n\n"
	"    See shutil.chown() for a higher-level function that accepts names in addition to numeric ids.\n\n"
	"    Raises an auditing event os.chown with arguments path, uid, gid, dir_fd.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3: Added support for specifying path as an open file descriptor, and the dir_fd and follow_symlinks arguments.\n\n"
	"    Changed in version 3.6: Supports a path-like object.\n\n"
	"os.chroot(path)\n\n"
	"    Change the root directory of the current process to path.\n\n"
	"    Availability: Unix.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.fchdir(fd)\n\n"
	"    Change the current working directory to the directory represented by the file descriptor fd. The descriptor must refer to an opened directory, not an open file. As of Python 3.3, this is equivalent to os.chdir(fd).\n\n"
	"    Raises an auditing event os.chdir with argument path.\n\n"
	"    Availability: Unix.\n\n"
	"os.getcwd()\n\n"
	"    Return a string representing the current working directory.\n\n"
	"os.getcwdb()\n\n"
	"    Return a bytestring representing the current working directory.\n\n"
	"    Changed in version 3.8: The function now uses the UTF-8 encoding on Windows, rather than the ANSI code page: see PEP 529 for the rationale. The function is no longer deprecated on Windows.\n\n"
	"os.lchflags(path, flags)\n\n"
	"    Set the flags of path to the numeric flags, like chflags(), but do not follow symbolic links. As of Python 3.3, this is equivalent to os.chflags(path, flags, follow_symlinks=False).\n\n"
	"    Raises an auditing event os.chflags with arguments path, flags.\n\n"
	"    Availability: Unix.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.lchmod(path, mode)\n\n"
	"    Change the mode of path to the numeric mode. If path is a symlink, this affects the symlink rather than the target. See the docs for chmod() for possible values of mode. As of Python 3.3, this is equivalent to os.chmod(path, mode, follow_symlinks=False).\n\n"
	"    Raises an auditing event os.chmod with arguments path, mode, dir_fd.\n\n"
	"    Availability: Unix.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.lchown(path, uid, gid)\n\n"
	"    Change the owner and group id of path to the numeric uid and gid. This function will not follow symbolic links. As of Python 3.3, this is equivalent to os.chown(path, uid, gid, follow_symlinks=False).\n\n"
	"    Raises an auditing event os.chown with arguments path, uid, gid, dir_fd.\n\n"
	"    Availability: Unix.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True)\n\n"
	"    Create a hard link pointing to src named dst.\n\n"
	"    This function can support specifying src_dir_fd and/or dst_dir_fd to supply paths relative to directory descriptors, and not following symlinks.\n\n"
	"    Raises an auditing event os.link with arguments src, dst, src_dir_fd, dst_dir_fd.\n\n"
	"    Availability: Unix, Windows.\n\n"
	"    Changed in version 3.2: Added Windows support.\n\n"
	"    New in version 3.3: Added the src_dir_fd, dst_dir_fd, and follow_symlinks arguments.\n\n"
	"    Changed in version 3.6: Accepts a path-like object for src and dst.\n\n"
	"os.listdir(path='.')\n\n"
	"    Return a list containing the names of the entries in the directory given by path. The list is in arbitrary order, and does not include the special entries '.' and '..' even if they are present in the directory. If a file is removed from or added to the directory during the call of this function, whether a name for that file be included is unspecified.\n\n"
	"    path may be a path-like object. If path is of type bytes (directly or indirectly through the PathLike interface), the filenames returned will also be of type bytes; in all other circumstances, they will be of type str.\n\n"
	"    This function can also support specifying a file descriptor; the file descriptor must refer to a directory.\n\n"
	"    Raises an auditing event os.listdir with argument path.\n\n"
	"    Note\n\n"
	"    To encode str filenames to bytes, use fsencode().\n\n"
	"    See also\n\n"
	"    The scandir() function returns directory entries along with file attribute information, giving better performance for many common use cases.\n\n"
	"    Changed in version 3.2: The path parameter became optional.\n\n"
	"    New in version 3.3: Added support for specifying path as an open file descriptor.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.lstat(path, *, dir_fd=None)\n\n"
	"    Perform the equivalent of an lstat() system call on the given path. Similar to stat(), but does not follow symbolic links. Return a stat_result object.\n\n"
	"    On platforms that do not support symbolic links, this is an alias for stat().\n\n"
	"    As of Python 3.3, this is equivalent to os.stat(path, dir_fd=dir_fd, follow_symlinks=False).\n\n"
	"    This function can also support paths relative to directory descriptors.\n\n"
	"    See also\n\n"
	"    The stat() function.\n\n"
	"    Changed in version 3.2: Added support for Windows 6.0 (Vista) symbolic links.\n\n"
	"    Changed in version 3.3: Added the dir_fd parameter.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"    Changed in version 3.8: On Windows, now opens reparse points that represent another path (name surrogates), including symbolic links and directory junctions. Other kinds of reparse points are resolved by the operating system as for stat().\n\n"
	"os.mkdir(path, mode=0o777, *, dir_fd=None)\n\n"
	"    Create a directory named path with numeric mode mode.\n\n"
	"    If the directory already exists, FileExistsError is raised.\n\n"
	"    On some systems, mode is ignored. Where it is used, the current umask value is first masked out. If bits other than the last 9 (i.e. the last 3 digits of the octal representation of the mode) are set, their meaning is platform-dependent. On some platforms, they are ignored and you should call chmod() explicitly to set them.\n\n"
	"    This function can also support paths relative to directory descriptors.\n\n"
	"    It is also possible to create temporary directories; see the tempfile module’s tempfile.mkdtemp() function.\n\n"
	"    Raises an auditing event os.mkdir with arguments path, mode, dir_fd.\n\n"
	"    New in version 3.3: The dir_fd argument.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.makedirs(name, mode=0o777, exist_ok=False)\n\n"
	"    Recursive directory creation function. Like mkdir(), but makes all intermediate-level directories needed to contain the leaf directory.\n\n"
	"    The mode parameter is passed to mkdir() for creating the leaf directory; see the mkdir() description for how it is interpreted. To set the file permission bits of any newly-created parent directories you can set the umask before invoking makedirs(). The file permission bits of existing parent directories are not changed.\n\n"
	"    If exist_ok is False (the default), an FileExistsError is raised if the target directory already exists.\n\n"
	"    Note\n\n"
	"    makedirs() will become confused if the path elements to create include pardir (eg. “..” on UNIX systems).\n\n"
	"    This function handles UNC paths correctly.\n\n"
	"    Raises an auditing event os.mkdir with arguments path, mode, dir_fd.\n\n"
	"    New in version 3.2: The exist_ok parameter.\n\n"
	"    Changed in version 3.4.1: Before Python 3.4.1, if exist_ok was True and the directory existed, makedirs() would still raise an error if mode did not match the mode of the existing directory. Since this behavior was impossible to implement safely, it was removed in Python 3.4.1. See bpo-21082.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"    Changed in version 3.7: The mode argument no longer affects the file permission bits of newly-created intermediate-level directories.\n\n"
	"os.mkfifo(path, mode=0o666, *, dir_fd=None)\n\n"
	"    Create a FIFO (a named pipe) named path with numeric mode mode. The current umask value is first masked out from the mode.\n\n"
	"    This function can also support paths relative to directory descriptors.\n\n"
	"    FIFOs are pipes that can be accessed like regular files. FIFOs exist until they are deleted (for example with os.unlink()). Generally, FIFOs are used as rendezvous between “client” and “server” type processes: the server opens the FIFO for reading, and the client opens it for writing. Note that mkfifo() doesn’t open the FIFO — it just creates the rendezvous point.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3: The dir_fd argument.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.mknod(path, mode=0o600, device=0, *, dir_fd=None)\n\n"
	"    Create a filesystem node (file, device special file or named pipe) named path. mode specifies both the permissions to use and the type of node to be created, being combined (bitwise OR) with one of stat.S_IFREG, stat.S_IFCHR, stat.S_IFBLK, and stat.S_IFIFO (those constants are available in stat). For stat.S_IFCHR and stat.S_IFBLK, device defines the newly created device special file (probably using os.makedev()), otherwise it is ignored.\n\n"
	"    This function can also support paths relative to directory descriptors.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3: The dir_fd argument.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.major(device)\n\n"
	"    Extract the device major number from a raw device number (usually the st_dev or st_rdev field from stat).\n\n"
	"os.minor(device)\n\n"
	"    Extract the device minor number from a raw device number (usually the st_dev or st_rdev field from stat).\n\n"
	"os.makedev(major, minor)\n\n"
	"    Compose a raw device number from the major and minor device numbers.\n\n"
	"os.pathconf(path, name)\n\n"
	"    Return system configuration information relevant to a named file. name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX.1, Unix 95, Unix 98, and others). Some platforms define additional names as well. The names known to the host operating system are given in the pathconf_names dictionary. For configuration variables not included in that mapping, passing an integer for name is also accepted.\n\n"
	"    If name is a string and is not known, ValueError is raised. If a specific value for name is not supported by the host system, even if it is included in pathconf_names, an OSError is raised with errno.EINVAL for the error number.\n\n"
	"    This function can support specifying a file descriptor.\n\n"
	"    Availability: Unix.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.pathconf_names\n\n"
	"    Dictionary mapping names accepted by pathconf() and fpathconf() to the integer values defined for those names by the host operating system. This can be used to determine the set of names known to the system.\n\n"
	"    Availability: Unix.\n\n"
	"os.readlink(path, *, dir_fd=None)\n\n"
	"    Return a string representing the path to which the symbolic link points. The result may be either an absolute or relative pathname; if it is relative, it may be converted to an absolute pathname using os.path.join(os.path.dirname(path), result).\n\n"
	"    If the path is a string object (directly or indirectly through a PathLike interface), the result will also be a string object, and the call may raise a UnicodeDecodeError. If the path is a bytes object (direct or indirectly), the result will be a bytes object.\n\n"
	"    This function can also support paths relative to directory descriptors.\n\n"
	"    When trying to resolve a path that may contain links, use realpath() to properly handle recursion and platform differences.\n\n"
	"    Availability: Unix, Windows.\n\n"
	"    Changed in version 3.2: Added support for Windows 6.0 (Vista) symbolic links.\n\n"
	"    New in version 3.3: The dir_fd argument.\n\n"
	"    Changed in version 3.6: Accepts a path-like object on Unix.\n\n"
	"    Changed in version 3.8: Accepts a path-like object and a bytes object on Windows.\n\n"
	"    Changed in version 3.8: Added support for directory junctions, and changed to return the substitution path (which typically includes \\\\?\\ prefix) rather than the optional “print name” field that was previously returned.\n\n"
	"os.remove(path, *, dir_fd=None)\n\n"
	"    Remove (delete) the file path. If path is a directory, an IsADirectoryError is raised. Use rmdir() to remove directories. If the file does not exist, a FileNotFoundError is raised.\n\n"
	"    This function can support paths relative to directory descriptors.\n\n"
	"    On Windows, attempting to remove a file that is in use causes an exception to be raised; on Unix, the directory entry is removed but the storage allocated to the file is not made available until the original file is no longer in use.\n\n"
	"    This function is semantically identical to unlink().\n\n"
	"    Raises an auditing event os.remove with arguments path, dir_fd.\n\n"
	"    New in version 3.3: The dir_fd argument.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.removedirs(name)\n\n"
	"    Remove directories recursively. Works like rmdir() except that, if the leaf directory is successfully removed, removedirs() tries to successively remove every parent directory mentioned in path until an error is raised (which is ignored, because it generally means that a parent directory is not empty). For example, os.removedirs('foo/bar/baz') will first remove the directory 'foo/bar/baz', and then remove 'foo/bar' and 'foo' if they are empty. Raises OSError if the leaf directory could not be successfully removed.\n\n"
	"    Raises an auditing event os.remove with arguments path, dir_fd.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None)\n\n"
	"    Rename the file or directory src to dst. If dst exists, the operation will fail with an OSError subclass in a number of cases:\n\n"
	"    On Windows, if dst exists a FileExistsError is always raised.\n\n"
	"    On Unix, if src is a file and dst is a directory or vice-versa, an IsADirectoryError or a NotADirectoryError will be raised respectively. If both are directories and dst is empty, dst will be silently replaced. If dst is a non-empty directory, an OSError is raised. If both are files, dst it will be replaced silently if the user has permission. The operation may fail on some Unix flavors if src and dst are on different filesystems. If successful, the renaming will be an atomic operation (this is a POSIX requirement).\n\n"
	"    This function can support specifying src_dir_fd and/or dst_dir_fd to supply paths relative to directory descriptors.\n\n"
	"    If you want cross-platform overwriting of the destination, use replace().\n\n"
	"    Raises an auditing event os.rename with arguments src, dst, src_dir_fd, dst_dir_fd.\n\n"
	"    New in version 3.3: The src_dir_fd and dst_dir_fd arguments.\n\n"
	"    Changed in version 3.6: Accepts a path-like object for src and dst.\n\n"
	"os.renames(old, new)\n\n"
	"    Recursive directory or file renaming function. Works like rename(), except creation of any intermediate directories needed to make the new pathname good is attempted first. After the rename, directories corresponding to rightmost path segments of the old name will be pruned away using removedirs().\n\n"
	"    Note\n\n"
	"    This function can fail with the new directory structure made if you lack permissions needed to remove the leaf directory or file.\n\n"
	"    Raises an auditing event os.rename with arguments src, dst, src_dir_fd, dst_dir_fd.\n\n"
	"    Changed in version 3.6: Accepts a path-like object for old and new.\n\n"
	"os.replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None)\n\n"
	"    Rename the file or directory src to dst. If dst is a directory, OSError will be raised. If dst exists and is a file, it will be replaced silently if the user has permission. The operation may fail if src and dst are on different filesystems. If successful, the renaming will be an atomic operation (this is a POSIX requirement).\n\n"
	"    This function can support specifying src_dir_fd and/or dst_dir_fd to supply paths relative to directory descriptors.\n\n"
	"    Raises an auditing event os.rename with arguments src, dst, src_dir_fd, dst_dir_fd.\n\n"
	"    New in version 3.3.\n\n"
	"    Changed in version 3.6: Accepts a path-like object for src and dst.\n\n"
	"os.rmdir(path, *, dir_fd=None)\n\n"
	"    Remove (delete) the directory path. If the directory does not exist or is not empty, an FileNotFoundError or an OSError is raised respectively. In order to remove whole directory trees, shutil.rmtree() can be used.\n\n"
	"    This function can support paths relative to directory descriptors.\n\n"
	"    Raises an auditing event os.rmdir with arguments path, dir_fd.\n\n"
	"    New in version 3.3: The dir_fd parameter.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.scandir(path='.')\n\n"
	"    Return an iterator of os.DirEntry objects corresponding to the entries in the directory given by path. The entries are yielded in arbitrary order, and the special entries '.' and '..' are not included. If a file is removed from or added to the directory after creating the iterator, whether an entry for that file be included is unspecified.\n\n"
	"    Using scandir() instead of listdir() can significantly increase the performance of code that also needs file type or file attribute information, because os.DirEntry objects expose this information if the operating system provides it when scanning a directory. All os.DirEntry methods may perform a system call, but is_dir() and is_file() usually only require a system call for symbolic links; os.DirEntry.stat() always requires a system call on Unix but only requires one for symbolic links on Windows.\n\n"
	"    path may be a path-like object. If path is of type bytes (directly or indirectly through the PathLike interface), the type of the name and path attributes of each os.DirEntry will be bytes; in all other circumstances, they will be of type str.\n\n"
	"    This function can also support specifying a file descriptor; the file descriptor must refer to a directory.\n\n"
	"    Raises an auditing event os.scandir with argument path.\n\n"
	"    The scandir() iterator supports the context manager protocol and has the following method:\n\n"
	"    scandir.close()\n\n"
	"        Close the iterator and free acquired resources.\n\n"
	"        This is called automatically when the iterator is exhausted or garbage collected, or when an error happens during iterating. However it is advisable to call it explicitly or use the with statement.\n\n"
	"        New in version 3.6.\n\n"
	"    The following example shows a simple use of scandir() to display all the files (excluding directories) in the given path that don’t start with '.'. The entry.is_file() call will generally not make an additional system call:\n\n"
	"    with os.scandir(path) as it:\n"
	"        for entry in it:\n"
	"            if not entry.name.startswith('.') and entry.is_file():\n"
	"                print(entry.name)\n\n"
	"    Note\n\n"
	"    On Unix-based systems, scandir() uses the system’s opendir() and readdir() functions. On Windows, it uses the Win32 FindFirstFileW and FindNextFileW functions.\n\n"
	"    New in version 3.5.\n\n"
	"    New in version 3.6: Added support for the context manager protocol and the close() method. If a scandir() iterator is neither exhausted nor explicitly closed a ResourceWarning will be emitted in its destructor.\n\n"
	"    The function accepts a path-like object.\n\n"
	"    Changed in version 3.7: Added support for file descriptors on Unix.\n\n"
	"class os.DirEntry\n\n"
	"    Object yielded by scandir() to expose the file path and other file attributes of a directory entry.\n\n"
	"    scandir() will provide as much of this information as possible without making additional system calls. When a stat() or lstat() system call is made, the os.DirEntry object will cache the result.\n\n"
	"    os.DirEntry instances are not intended to be stored in long-lived data structures; if you know the file metadata has changed or if a long time has elapsed since calling scandir(), call os.stat(entry.path) to fetch up-to-date information.\n\n"
	"    Because the os.DirEntry methods can make operating system calls, they may also raise OSError. If you need very fine-grained control over errors, you can catch OSError when calling one of the os.DirEntry methods and handle as appropriate.\n\n"
	"    To be directly usable as a path-like object, os.DirEntry implements the PathLike interface.\n\n"
	"    Attributes and methods on a os.DirEntry instance are as follows:\n\n"
	"    name\n\n"
	"        The entry’s base filename, relative to the scandir() path argument.\n\n"
	"        The name attribute will be bytes if the scandir() path argument is of type bytes and str otherwise. Use fsdecode() to decode byte filenames.\n\n"
	"    path\n\n"
	"        The entry’s full path name: equivalent to os.path.join(scandir_path, entry.name) where scandir_path is the scandir() path argument. The path is only absolute if the scandir() path argument was absolute. If the scandir() path argument was a file descriptor, the path attribute is the same as the name attribute.\n\n"
	"        The path attribute will be bytes if the scandir() path argument is of type bytes and str otherwise. Use fsdecode() to decode byte filenames.\n\n"
	"    inode()\n\n"
	"        Return the inode number of the entry.\n\n"
	"        The result is cached on the os.DirEntry object. Use os.stat(entry.path, follow_symlinks=False).st_ino to fetch up-to-date information.\n\n"
	"        On the first, uncached call, a system call is required on Windows but not on Unix.\n\n"
	"    is_dir(*, follow_symlinks=True)\n\n"
	"        Return True if this entry is a directory or a symbolic link pointing to a directory; return False if the entry is or points to any other kind of file, or if it doesn’t exist anymore.\n\n"
	"        If follow_symlinks is False, return True only if this entry is a directory (without following symlinks); return False if the entry is any other kind of file or if it doesn’t exist anymore.\n\n"
	"        The result is cached on the os.DirEntry object, with a separate cache for follow_symlinks True and False. Call os.stat() along with stat.S_ISDIR() to fetch up-to-date information.\n\n"
	"        On the first, uncached call, no system call is required in most cases. Specifically, for non-symlinks, neither Windows or Unix require a system call, except on certain Unix file systems, such as network file systems, that return dirent.d_type == DT_UNKNOWN. If the entry is a symlink, a system call will be required to follow the symlink unless follow_symlinks is False.\n\n"
	"        This method can raise OSError, such as PermissionError, but FileNotFoundError is caught and not raised.\n\n"
	"    is_file(*, follow_symlinks=True)\n\n"
	"        Return True if this entry is a file or a symbolic link pointing to a file; return False if the entry is or points to a directory or other non-file entry, or if it doesn’t exist anymore.\n\n"
	"        If follow_symlinks is False, return True only if this entry is a file (without following symlinks); return False if the entry is a directory or other non-file entry, or if it doesn’t exist anymore.\n\n"
	"        The result is cached on the os.DirEntry object. Caching, system calls made, and exceptions raised are as per is_dir().\n\n"
	"    is_symlink()\n\n"
	"        Return True if this entry is a symbolic link (even if broken); return False if the entry points to a directory or any kind of file, or if it doesn’t exist anymore.\n\n"
	"        The result is cached on the os.DirEntry object. Call os.path.islink() to fetch up-to-date information.\n\n"
	"        On the first, uncached call, no system call is required in most cases. Specifically, neither Windows or Unix require a system call, except on certain Unix file systems, such as network file systems, that return dirent.d_type == DT_UNKNOWN.\n\n"
	"        This method can raise OSError, such as PermissionError, but FileNotFoundError is caught and not raised.\n\n"
	"    stat(*, follow_symlinks=True)\n\n"
	"        Return a stat_result object for this entry. This method follows symbolic links by default; to stat a symbolic link add the follow_symlinks=False argument.\n\n"
	"        On Unix, this method always requires a system call. On Windows, it only requires a system call if follow_symlinks is True and the entry is a reparse point (for example, a symbolic link or directory junction).\n\n"
	"        On Windows, the st_ino, st_dev and st_nlink attributes of the stat_result are always set to zero. Call os.stat() to get these attributes.\n\n"
	"        The result is cached on the os.DirEntry object, with a separate cache for follow_symlinks True and False. Call os.stat() to fetch up-to-date information.\n\n"
	"    Note that there is a nice correspondence between several attributes and methods of os.DirEntry and of pathlib.Path. In particular, the name attribute has the same meaning, as do the is_dir(), is_file(), is_symlink() and stat() methods.\n\n"
	"    New in version 3.5.\n\n"
	"    Changed in version 3.6: Added support for the PathLike interface. Added support for bytes paths on Windows.\n\n"
	"os.stat(path, *, dir_fd=None, follow_symlinks=True)\n\n"
	"    Get the status of a file or a file descriptor. Perform the equivalent of a stat() system call on the given path. path may be specified as either a string or bytes – directly or indirectly through the PathLike interface – or as an open file descriptor. Return a stat_result object.\n\n"
	"    This function normally follows symlinks; to stat a symlink add the argument follow_symlinks=False, or use lstat().\n\n"
	"    This function can support specifying a file descriptor and not following symlinks.\n\n"
	"    On Windows, passing follow_symlinks=False will disable following all name-surrogate reparse points, which includes symlinks and directory junctions. Other types of reparse points that do not resemble links or that the operating system is unable to follow will be opened directly. When following a chain of multiple links, this may result in the original link being returned instead of the non-link that prevented full traversal. To obtain stat results for the final path in this case, use the os.path.realpath() function to resolve the path name as far as possible and call lstat() on the result. This does not apply to dangling symlinks or junction points, which will raise the usual exceptions.\n\n"
	"    Example:\n"
	"    >>>\n\n"
	"    >>> import os\n"
	"    >>> statinfo = os.stat('somefile.txt')\n"
	"    >>> statinfo\n"
	"    os.stat_result(st_mode=33188, st_ino=7876932, st_dev=234881026,\n"
	"    st_nlink=1, st_uid=501, st_gid=501, st_size=264, st_atime=1297230295,\n"
	"    st_mtime=1297230027, st_ctime=1297230027)\n"
	"    >>> statinfo.st_size\n"
	"    264\n\n"
	"    See also\n\n"
	"    fstat() and lstat() functions.\n\n"
	"    New in version 3.3: Added the dir_fd and follow_symlinks arguments, specifying a file descriptor instead of a path.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"    Changed in version 3.8: On Windows, all reparse points that can be resolved by the operating system are now followed, and passing follow_symlinks=False disables following all name surrogate reparse points. If the operating system reaches a reparse point that it is not able to follow, stat now returns the information for the original path as if follow_symlinks=False had been specified instead of raising an error.\n\n"
	"class os.stat_result\n\n"
	"    Object whose attributes correspond roughly to the members of the stat structure. It is used for the result of os.stat(), os.fstat() and os.lstat().\n\n"
	"    Attributes:\n\n"
	"    st_mode\n\n"
	"        File mode: file type and file mode bits (permissions).\n\n"
	"    st_ino\n\n"
	"        Platform dependent, but if non-zero, uniquely identifies the file for a given value of st_dev. Typically:\n\n"
	"            the inode number on Unix,\n\n"
	"            the file index on Windows\n\n"
	"    st_dev\n\n"
	"        Identifier of the device on which this file resides.\n\n"
	"    st_nlink\n\n"
	"        Number of hard links.\n\n"
	"    st_uid\n\n"
	"        User identifier of the file owner.\n\n"
	"    st_gid\n\n"
	"        Group identifier of the file owner.\n\n"
	"    st_size\n\n"
	"        Size of the file in bytes, if it is a regular file or a symbolic link. The size of a symbolic link is the length of the pathname it contains, without a terminating null byte.\n\n"
	"    Timestamps:\n\n"
	"    st_atime\n\n"
	"        Time of most recent access expressed in seconds.\n\n"
	"    st_mtime\n\n"
	"        Time of most recent content modification expressed in seconds.\n\n"
	"    st_ctime\n\n"
	"        Platform dependent:\n\n"
	"            the time of most recent metadata change on Unix,\n\n"
	"            the time of creation on Windows, expressed in seconds.\n\n"
	"    st_atime_ns\n\n"
	"        Time of most recent access expressed in nanoseconds as an integer.\n\n"
	"    st_mtime_ns\n\n"
	"        Time of most recent content modification expressed in nanoseconds as an integer.\n\n"
	"    st_ctime_ns\n\n"
	"        Platform dependent:\n\n"
	"            the time of most recent metadata change on Unix,\n\n"
	"            the time of creation on Windows, expressed in nanoseconds as an integer.\n\n"
	"    Note\n\n"
	"    The exact meaning and resolution of the st_atime, st_mtime, and st_ctime attributes depend on the operating system and the file system. For example, on Windows systems using the FAT or FAT32 file systems, st_mtime has 2-second resolution, and st_atime has only 1-day resolution. See your operating system documentation for details.\n\n"
	"    Similarly, although st_atime_ns, st_mtime_ns, and st_ctime_ns are always expressed in nanoseconds, many systems do not provide nanosecond precision. On systems that do provide nanosecond precision, the floating-point object used to store st_atime, st_mtime, and st_ctime cannot preserve all of it, and as such will be slightly inexact. If you need the exact timestamps you should always use st_atime_ns, st_mtime_ns, and st_ctime_ns.\n\n"
	"    On some Unix systems (such as Linux), the following attributes may also be available:\n\n"
	"    st_blocks\n\n"
	"        Number of 512-byte blocks allocated for file. This may be smaller than st_size/512 when the file has holes.\n\n"
	"    st_blksize\n\n"
	"        “Preferred” blocksize for efficient file system I/O. Writing to a file in smaller chunks may cause an inefficient read-modify-rewrite.\n\n"
	"    st_rdev\n\n"
	"        Type of device if an inode device.\n\n"
	"    st_flags\n\n"
	"        User defined flags for file.\n\n"
	"    On other Unix systems (such as FreeBSD), the following attributes may be available (but may be only filled out if root tries to use them):\n\n"
	"    st_gen\n\n"
	"        File generation number.\n\n"
	"    st_birthtime\n\n"
	"        Time of file creation.\n\n"
	"    On Solaris and derivatives, the following attributes may also be available:\n\n"
	"    st_fstype\n\n"
	"        String that uniquely identifies the type of the filesystem that contains the file.\n\n"
	"    On Mac OS systems, the following attributes may also be available:\n\n"
	"    st_rsize\n\n"
	"        Real size of the file.\n\n"
	"    st_creator\n\n"
	"        Creator of the file.\n\n"
	"    st_type\n\n"
	"        File type.\n\n"
	"    On Windows systems, the following attributes are also available:\n\n"
	"    st_file_attributes\n\n"
	"        Windows file attributes: dwFileAttributes member of the BY_HANDLE_FILE_INFORMATION structure returned by GetFileInformationByHandle(). See the FILE_ATTRIBUTE_* constants in the stat module.\n\n"
	"    st_reparse_tag\n\n"
	"        When st_file_attributes has the FILE_ATTRIBUTE_REPARSE_POINT set, this field contains the tag identifying the type of reparse point. See the IO_REPARSE_TAG_* constants in the stat module.\n\n"
	"    The standard module stat defines functions and constants that are useful for extracting information from a stat structure. (On Windows, some items are filled with dummy values.)\n\n"
	"    For backward compatibility, a stat_result instance is also accessible as a tuple of at least 10 integers giving the most important (and portable) members of the stat structure, in the order st_mode, st_ino, st_dev, st_nlink, st_uid, st_gid, st_size, st_atime, st_mtime, st_ctime. More items may be added at the end by some implementations. For compatibility with older Python versions, accessing stat_result as a tuple always returns integers.\n\n"
	"    New in version 3.3: Added the st_atime_ns, st_mtime_ns, and st_ctime_ns members.\n\n"
	"    New in version 3.5: Added the st_file_attributes member on Windows.\n\n"
	"    Changed in version 3.5: Windows now returns the file index as st_ino when available.\n\n"
	"    New in version 3.7: Added the st_fstype member to Solaris/derivatives.\n\n"
	"    New in version 3.8: Added the st_reparse_tag member on Windows.\n\n"
	"    Changed in version 3.8: On Windows, the st_mode member now identifies special files as S_IFCHR, S_IFIFO or S_IFBLK as appropriate.\n\n"
	"os.statvfs(path)\n\n"
	"    Perform a statvfs() system call on the given path. The return value is an object whose attributes describe the filesystem on the given path, and correspond to the members of the statvfs structure, namely: f_bsize, f_frsize, f_blocks, f_bfree, f_bavail, f_files, f_ffree, f_favail, f_flag, f_namemax, f_fsid.\n\n"
	"    Two module-level constants are defined for the f_flag attribute’s bit-flags: if ST_RDONLY is set, the filesystem is mounted read-only, and if ST_NOSUID is set, the semantics of setuid/setgid bits are disabled or not supported.\n\n"
	"    Additional module-level constants are defined for GNU/glibc based systems. These are ST_NODEV (disallow access to device special files), ST_NOEXEC (disallow program execution), ST_SYNCHRONOUS (writes are synced at once), ST_MANDLOCK (allow mandatory locks on an FS), ST_WRITE (write on file/directory/symlink), ST_APPEND (append-only file), ST_IMMUTABLE (immutable file), ST_NOATIME (do not update access times), ST_NODIRATIME (do not update directory access times), ST_RELATIME (update atime relative to mtime/ctime).\n\n"
	"    This function can support specifying a file descriptor.\n\n"
	"    Availability: Unix.\n\n"
	"    Changed in version 3.2: The ST_RDONLY and ST_NOSUID constants were added.\n\n"
	"    New in version 3.3: Added support for specifying path as an open file descriptor.\n\n"
	"    Changed in version 3.4: The ST_NODEV, ST_NOEXEC, ST_SYNCHRONOUS, ST_MANDLOCK, ST_WRITE, ST_APPEND, ST_IMMUTABLE, ST_NOATIME, ST_NODIRATIME, and ST_RELATIME constants were added.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"    New in version 3.7: Added f_fsid.\n\n"
	"os.supports_dir_fd\n\n"
	"    A set object indicating which functions in the os module accept an open file descriptor for their dir_fd parameter. Different platforms provide different features, and the underlying functionality Python uses to implement the dir_fd parameter is not available on all platforms Python supports. For consistency’s sake, functions that may support dir_fd always allow specifying the parameter, but will throw an exception if the functionality is used when it’s not locally available. (Specifying None for dir_fd is always supported on all platforms.)\n\n"
	"    To check whether a particular function accepts an open file descriptor for its dir_fd parameter, use the in operator on supports_dir_fd. As an example, this expression evaluates to True if os.stat() accepts open file descriptors for dir_fd on the local platform:\n\n"
	"    os.stat in os.supports_dir_fd\n\n"
	"    Currently dir_fd parameters only work on Unix platforms; none of them work on Windows.\n\n"
	"    New in version 3.3.\n\n"
	"os.supports_effective_ids\n\n"
	"    A set object indicating whether os.access() permits specifying True for its effective_ids parameter on the local platform. (Specifying False for effective_ids is always supported on all platforms.) If the local platform supports it, the collection will contain os.access(); otherwise it will be empty.\n\n"
	"    This expression evaluates to True if os.access() supports effective_ids=True on the local platform:\n\n"
	"    os.access in os.supports_effective_ids\n\n"
	"    Currently effective_ids is only supported on Unix platforms; it does not work on Windows.\n\n"
	"    New in version 3.3.\n\n"
	"os.supports_fd\n\n"
	"    A set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor on the local platform. Different platforms provide different features, and the underlying functionality Python uses to accept open file descriptors as path arguments is not available on all platforms Python supports.\n\n"
	"    To determine whether a particular function permits specifying an open file descriptor for its path parameter, use the in operator on supports_fd. As an example, this expression evaluates to True if os.chdir() accepts open file descriptors for path on your local platform:\n\n"
	"    os.chdir in os.supports_fd\n\n"
	"    New in version 3.3.\n\n"
	"os.supports_follow_symlinks\n\n"
	"    A set object indicating which functions in the os module accept False for their follow_symlinks parameter on the local platform. Different platforms provide different features, and the underlying functionality Python uses to implement follow_symlinks is not available on all platforms Python supports. For consistency’s sake, functions that may support follow_symlinks always allow specifying the parameter, but will throw an exception if the functionality is used when it’s not locally available. (Specifying True for follow_symlinks is always supported on all platforms.)\n\n"
	"    To check whether a particular function accepts False for its follow_symlinks parameter, use the in operator on supports_follow_symlinks. As an example, this expression evaluates to True if you may specify follow_symlinks=False when calling os.stat() on the local platform:\n\n"
	"    os.stat in os.supports_follow_symlinks\n\n"
	"    New in version 3.3.\n\n"
	"os.symlink(src, dst, target_is_directory=False, *, dir_fd=None)\n\n"
	"    Create a symbolic link pointing to src named dst.\n\n"
	"    On Windows, a symlink represents either a file or a directory, and does not morph to the target dynamically. If the target is present, the type of the symlink will be created to match. Otherwise, the symlink will be created as a directory if target_is_directory is True or a file symlink (the default) otherwise. On non-Windows platforms, target_is_directory is ignored.\n\n"
	"    This function can support paths relative to directory descriptors.\n\n"
	"    Note\n\n"
	"    On newer versions of Windows 10, unprivileged accounts can create symlinks if Developer Mode is enabled. When Developer Mode is not available/enabled, the SeCreateSymbolicLinkPrivilege privilege is required, or the process must be run as an administrator.\n\n"
	"    OSError is raised when the function is called by an unprivileged user.\n\n"
	"    Raises an auditing event os.symlink with arguments src, dst, dir_fd.\n\n"
	"    Availability: Unix, Windows.\n\n"
	"    Changed in version 3.2: Added support for Windows 6.0 (Vista) symbolic links.\n\n"
	"    New in version 3.3: Added the dir_fd argument, and now allow target_is_directory on non-Windows platforms.\n\n"
	"    Changed in version 3.6: Accepts a path-like object for src and dst.\n\n"
	"    Changed in version 3.8: Added support for unelevated symlinks on Windows with Developer Mode.\n\n"
	"os.sync()\n\n"
	"    Force write of everything to disk.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3.\n\n"
	"os.truncate(path, length)\n\n"
	"    Truncate the file corresponding to path, so that it is at most length bytes in size.\n\n"
	"    This function can support specifying a file descriptor.\n\n"
	"    Raises an auditing event os.truncate with arguments path, length.\n\n"
	"    Availability: Unix, Windows.\n\n"
	"    New in version 3.3.\n\n"
	"    Changed in version 3.5: Added support for Windows\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.unlink(path, *, dir_fd=None)\n\n"
	"    Remove (delete) the file path. This function is semantically identical to remove(); the unlink name is its traditional Unix name. Please see the documentation for remove() for further information.\n\n"
	"    Raises an auditing event os.remove with arguments path, dir_fd.\n\n"
	"    New in version 3.3: The dir_fd parameter.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.utime(path, times=None, *, [ns, ]dir_fd=None, follow_symlinks=True)\n\n"
	"    Set the access and modified times of the file specified by path.\n\n"
	"    utime() takes two optional parameters, times and ns. These specify the times set on path and are used as follows:\n\n"
	"        If ns is specified, it must be a 2-tuple of the form (atime_ns, mtime_ns) where each member is an int expressing nanoseconds.\n\n"
	"        If times is not None, it must be a 2-tuple of the form (atime, mtime) where each member is an int or float expressing seconds.\n\n"
	"        If times is None and ns is unspecified, this is equivalent to specifying ns=(atime_ns, mtime_ns) where both times are the current time.\n\n"
	"    It is an error to specify tuples for both times and ns.\n\n"
	"    Note that the exact times you set here may not be returned by a subsequent stat() call, depending on the resolution with which your operating system records access and modification times; see stat(). The best way to preserve exact times is to use the st_atime_ns and st_mtime_ns fields from the os.stat() result object with the ns parameter to utime.\n\n"
	"    This function can support specifying a file descriptor, paths relative to directory descriptors and not following symlinks.\n\n"
	"    Raises an auditing event os.utime with arguments path, times, ns, dir_fd.\n\n"
	"    New in version 3.3: Added support for specifying path as an open file descriptor, and the dir_fd, follow_symlinks, and ns parameters.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.walk(top, topdown=True, onerror=None, followlinks=False)\n\n"
	"    Generate the file names in a directory tree by walking the tree either top-down or bottom-up. For each directory in the tree rooted at directory top (including top itself), it yields a 3-tuple (dirpath, dirnames, filenames).\n\n"
	"    dirpath is a string, the path to the directory. dirnames is a list of the names of the subdirectories in dirpath (excluding '.' and '..'). filenames is a list of the names of the non-directory files in dirpath. Note that the names in the lists contain no path components. To get a full path (which begins with top) to a file or directory in dirpath, do os.path.join(dirpath, name). Whether or not the lists are sorted depends on the file system. If a file is removed from or added to the dirpath directory during generating the lists, whether a name for that file be included is unspecified.\n\n"
	"    If optional argument topdown is True or not specified, the triple for a directory is generated before the triples for any of its subdirectories (directories are generated top-down). If topdown is False, the triple for a directory is generated after the triples for all of its subdirectories (directories are generated bottom-up). No matter the value of topdown, the list of subdirectories is retrieved before the tuples for the directory and its subdirectories are generated.\n\n"
	"    When topdown is True, the caller can modify the dirnames list in-place (perhaps using del or slice assignment), and walk() will only recurse into the subdirectories whose names remain in dirnames; this can be used to prune the search, impose a specific order of visiting, or even to inform walk() about directories the caller creates or renames before it resumes walk() again. Modifying dirnames when topdown is False has no effect on the behavior of the walk, because in bottom-up mode the directories in dirnames are generated before dirpath itself is generated.\n\n"
	"    By default, errors from the scandir() call are ignored. If optional argument onerror is specified, it should be a function; it will be called with one argument, an OSError instance. It can report the error to continue with the walk, or raise the exception to abort the walk. Note that the filename is available as the filename attribute of the exception object.\n\n"
	"    By default, walk() will not walk down into symbolic links that resolve to directories. Set followlinks to True to visit directories pointed to by symlinks, on systems that support them.\n\n"
	"    Note\n\n"
	"    Be aware that setting followlinks to True can lead to infinite recursion if a link points to a parent directory of itself. walk() does not keep track of the directories it visited already.\n\n"
	"    Note\n\n"
	"    If you pass a relative pathname, don’t change the current working directory between resumptions of walk(). walk() never changes the current directory, and assumes that its caller doesn’t either.\n\n"
	"    This example displays the number of bytes taken by non-directory files in each directory under the starting directory, except that it doesn’t look under any CVS subdirectory:\n\n"
	"    import os\n"
	"    from os.path import join, getsize\n"
	"    for root, dirs, files in os.walk('python/Lib/email'):\n"
	"        print(root, \"consumes\", end=\" \")\n"
	"        print(sum(getsize(join(root, name)) for name in files), end=\" \")\n"
	"        print(\"bytes in\", len(files), \"non-directory files\")\n"
	"        if 'CVS' in dirs:\n"
	"            dirs.remove('CVS')  # don't visit CVS directories\n\n"
	"    In the next example (simple implementation of shutil.rmtree()), walking the tree bottom-up is essential, rmdir() doesn’t allow deleting a directory before the directory is empty:\n\n"
	"    # Delete everything reachable from the directory named in \"top\",\n"
	"    # assuming there are no symbolic links.\n"
	"    # CAUTION:  This is dangerous!  For example, if top == '/', it\n"
	"    # could delete all your disk files.\n"
	"    import os\n"
	"    for root, dirs, files in os.walk(top, topdown=False):\n"
	"        for name in files:\n"
	"            os.remove(os.path.join(root, name))\n"
	"        for name in dirs:\n"
	"            os.rmdir(os.path.join(root, name))\n\n"
	"    Raises an auditing event os.walk with arguments top, topdown, onerror, followlinks.\n\n"
	"    Changed in version 3.5: This function now calls os.scandir() instead of os.listdir(), making it faster by reducing the number of calls to os.stat().\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.fwalk(top='.', topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None)\n\n"
	"    This behaves exactly like walk(), except that it yields a 4-tuple (dirpath, dirnames, filenames, dirfd), and it supports dir_fd.\n\n"
	"    dirpath, dirnames and filenames are identical to walk() output, and dirfd is a file descriptor referring to the directory dirpath.\n\n"
	"    This function always supports paths relative to directory descriptors and not following symlinks. Note however that, unlike other functions, the fwalk() default value for follow_symlinks is False.\n\n"
	"    Note\n\n"
	"    Since fwalk() yields file descriptors, those are only valid until the next iteration step, so you should duplicate them (e.g. with dup()) if you want to keep them longer.\n\n"
	"    This example displays the number of bytes taken by non-directory files in each directory under the starting directory, except that it doesn’t look under any CVS subdirectory:\n\n"
	"    import os\n"
	"    for root, dirs, files, rootfd in os.fwalk('python/Lib/email'):\n"
	"        print(root, \"consumes\", end=\"\")\n"
	"        print(sum([os.stat(name, dir_fd=rootfd).st_size for name in files]),\n"
	"              end=\"\")\n"
	"        print(\"bytes in\", len(files), \"non-directory files\")\n"
	"        if 'CVS' in dirs:\n"
	"            dirs.remove('CVS')  # don't visit CVS directories\n\n"
	"    In the next example, walking the tree bottom-up is essential: rmdir() doesn’t allow deleting a directory before the directory is empty:\n\n"
	"    # Delete everything reachable from the directory named in \"top\",\n"
	"    # assuming there are no symbolic links.\n"
	"    # CAUTION:  This is dangerous!  For example, if top == '/', it\n"
	"    # could delete all your disk files.\n"
	"    import os\n"
	"    for root, dirs, files, rootfd in os.fwalk(top, topdown=False):\n"
	"        for name in files:\n"
	"            os.unlink(name, dir_fd=rootfd)\n"
	"        for name in dirs:\n"
	"            os.rmdir(name, dir_fd=rootfd)\n\n"
	"    Raises an auditing event os.fwalk with arguments top, topdown, onerror, follow_symlinks, dir_fd.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"    Changed in version 3.7: Added support for bytes paths.\n\n"
	"os.memfd_create(name[, flags=os.MFD_CLOEXEC])\n\n"
	"    Create an anonymous file and return a file descriptor that refers to it. flags must be one of the os.MFD_* constants available on the system (or a bitwise ORed combination of them). By default, the new file descriptor is non-inheritable.\n\n"
	"    The name supplied in name is used as a filename and will be displayed as the target of the corresponding symbolic link in the directory /proc/self/fd/. The displayed name is always prefixed with memfd: and serves only for debugging purposes. Names do not affect the behavior of the file descriptor, and as such multiple files can have the same name without any side effects.\n\n"
	"    Availability: Linux 3.17 or newer with glibc 2.27 or newer.\n\n"
	"    New in version 3.8.\n\n"
	"os.MFD_CLOEXEC\n"
	"os.MFD_ALLOW_SEALING\n"
	"os.MFD_HUGETLB\n"
	"os.MFD_HUGE_SHIFT\n"
	"os.MFD_HUGE_MASK\n"
	"os.MFD_HUGE_64KB\n"
	"os.MFD_HUGE_512KB\n"
	"os.MFD_HUGE_1MB\n"
	"os.MFD_HUGE_2MB\n"
	"os.MFD_HUGE_8MB\n"
	"os.MFD_HUGE_16MB\n"
	"os.MFD_HUGE_32MB\n"
	"os.MFD_HUGE_256MB\n"
	"os.MFD_HUGE_512MB\n"
	"os.MFD_HUGE_1GB\n"
	"os.MFD_HUGE_2GB\n"
	"os.MFD_HUGE_16GB\n\n"
	"    These flags can be passed to memfd_create().\n\n"
	"    Availability: Linux 3.17 or newer with glibc 2.27 or newer. The MFD_HUGE* flags are only available since Linux 4.14.\n\n"
	"    New in version 3.8.\n\n"
	"Linux extended attributes\n\n"
	"New in version 3.3.\n\n"
	"These functions are all available on Linux only.\n\n"
	"os.getxattr(path, attribute, *, follow_symlinks=True)\n\n"
	"    Return the value of the extended filesystem attribute attribute for path. attribute can be bytes or str (directly or indirectly through the PathLike interface). If it is str, it is encoded with the filesystem encoding.\n\n"
	"    This function can support specifying a file descriptor and not following symlinks.\n\n"
	"    Raises an auditing event os.getxattr with arguments path, attribute.\n\n"
	"    Changed in version 3.6: Accepts a path-like object for path and attribute.\n\n"
	"os.listxattr(path=None, *, follow_symlinks=True)\n\n"
	"    Return a list of the extended filesystem attributes on path. The attributes in the list are represented as strings decoded with the filesystem encoding. If path is None, listxattr() will examine the current directory.\n\n"
	"    This function can support specifying a file descriptor and not following symlinks.\n\n"
	"    Raises an auditing event os.listxattr with argument path.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.removexattr(path, attribute, *, follow_symlinks=True)\n\n"
	"    Removes the extended filesystem attribute attribute from path. attribute should be bytes or str (directly or indirectly through the PathLike interface). If it is a string, it is encoded with the filesystem encoding.\n\n"
	"    This function can support specifying a file descriptor and not following symlinks.\n\n"
	"    Raises an auditing event os.removexattr with arguments path, attribute.\n\n"
	"    Changed in version 3.6: Accepts a path-like object for path and attribute.\n\n"
	"os.setxattr(path, attribute, value, flags=0, *, follow_symlinks=True)\n\n"
	"    Set the extended filesystem attribute attribute on path to value. attribute must be a bytes or str with no embedded NULs (directly or indirectly through the PathLike interface). If it is a str, it is encoded with the filesystem encoding. flags may be XATTR_REPLACE or XATTR_CREATE. If XATTR_REPLACE is given and the attribute does not exist, ENODATA will be raised. If XATTR_CREATE is given and the attribute already exists, the attribute will not be created and EEXISTS will be raised.\n\n"
	"    This function can support specifying a file descriptor and not following symlinks.\n\n"
	"    Note\n\n"
	"    A bug in Linux kernel versions less than 2.6.39 caused the flags argument to be ignored on some filesystems.\n\n"
	"    Raises an auditing event os.setxattr with arguments path, attribute, value, flags.\n\n"
	"    Changed in version 3.6: Accepts a path-like object for path and attribute.\n\n"
	"os.XATTR_SIZE_MAX\n\n"
	"    The maximum size the value of an extended attribute can be. Currently, this is 64 KiB on Linux.\n\n"
	"os.XATTR_CREATE\n\n"
	"    This is a possible value for the flags argument in setxattr(). It indicates the operation must create an attribute.\n\n"
	"os.XATTR_REPLACE\n\n"
	"    This is a possible value for the flags argument in setxattr(). It indicates the operation must replace an existing attribute.\n\n"
	"Process Management\n\n"
	"These functions may be used to create and manage processes.\n\n"
	"The various exec* functions take a list of arguments for the new program loaded into the process. In each case, the first of these arguments is passed to the new program as its own name rather than as an argument a user may have typed on a command line. For the C programmer, this is the argv[0] passed to a program’s main(). For example, os.execv('/bin/echo', ['foo', 'bar']) will only print bar on standard output; foo will seem to be ignored.\n\n"
	"os.abort()\n\n"
	"    Generate a SIGABRT signal to the current process. On Unix, the default behavior is to produce a core dump; on Windows, the process immediately returns an exit code of 3. Be aware that calling this function will not call the Python signal handler registered for SIGABRT with signal.signal().\n\n"
	"os.add_dll_directory(path)\n\n"
	"    Add a path to the DLL search path.\n\n"
	"    This search path is used when resolving dependencies for imported extension modules (the module itself is resolved through sys.path), and also by ctypes.\n\n"
	"    Remove the directory by calling close() on the returned object or using it in a with statement.\n\n"
	"    See the Microsoft documentation for more information about how DLLs are loaded.\n\n"
	"    Raises an auditing event os.add_dll_directory with argument path.\n\n"
	"    Availability: Windows.\n\n"
	"    New in version 3.8: Previous versions of CPython would resolve DLLs using the default behavior for the current process. This led to inconsistencies, such as only sometimes searching PATH or the current working directory, and OS functions such as AddDllDirectory having no effect.\n\n"
	"    In 3.8, the two primary ways DLLs are loaded now explicitly override the process-wide behavior to ensure consistency. See the porting notes for information on updating libraries.\n\n"
	"os.execl(path, arg0, arg1, ...)\n"
	"os.execle(path, arg0, arg1, ..., env)\n"
	"os.execlp(file, arg0, arg1, ...)\n"
	"os.execlpe(file, arg0, arg1, ..., env)\n"
	"os.execv(path, args)\n"
	"os.execve(path, args, env)\n"
	"os.execvp(file, args)\n"
	"os.execvpe(file, args, env)\n\n"
	"    These functions all execute a new program, replacing the current process; they do not return. On Unix, the new executable is loaded into the current process, and will have the same process id as the caller. Errors will be reported as OSError exceptions.\n\n"
	"    The current process is replaced immediately. Open file objects and descriptors are not flushed, so if there may be data buffered on these open files, you should flush them using sys.stdout.flush() or os.fsync() before calling an exec* function.\n\n"
	"    The “l” and “v” variants of the exec* functions differ in how command-line arguments are passed. The “l” variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the execl*() functions. The “v” variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter. In either case, the arguments to the child process should start with the name of the command being run, but this is not enforced.\n\n"
	"    The variants which include a “p” near the end (execlp(), execlpe(), execvp(), and execvpe()) will use the PATH environment variable to locate the program file. When the environment is being replaced (using one of the exec*e variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable. The other variants, execl(), execle(), execv(), and execve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path.\n\n"
	"    For execle(), execlpe(), execve(), and execvpe() (note that these all end in “e”), the env parameter must be a mapping which is used to define the environment variables for the new process (these are used instead of the current process’ environment); the functions execl(), execlp(), execv(), and execvp() all cause the new process to inherit the environment of the current process.\n\n"
	"    For execve() on some platforms, path may also be specified as an open file descriptor. This functionality may not be supported on your platform; you can check whether or not it is available using os.supports_fd. If it is unavailable, using it will raise a NotImplementedError.\n\n"
	"    Raises an auditing event os.exec with arguments path, args, env.\n\n"
	"    Availability: Unix, Windows.\n\n"
	"    New in version 3.3: Added support for specifying path as an open file descriptor for execve().\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os._exit(n)\n\n"
	"    Exit the process with status n, without calling cleanup handlers, flushing stdio buffers, etc.\n\n"
	"    Note\n\n"
	"    The standard way to exit is sys.exit(n). _exit() should normally only be used in the child process after a fork().\n\n"
	"The following exit codes are defined and can be used with _exit(), although they are not required. These are typically used for system programs written in Python, such as a mail server’s external command delivery program.\n\n"
	"Note\n\n"
	"Some of these may not be available on all Unix platforms, since there is some variation. These constants are defined where they are defined by the underlying platform.\n\n"
	"os.EX_OK\n\n"
	"    Exit code that means no error occurred.\n\n"
	"    Availability: Unix.\n\n"
	"os.EX_USAGE\n\n"
	"    Exit code that means the command was used incorrectly, such as when the wrong number of arguments are given.\n\n"
	"    Availability: Unix.\n\n"
	"os.EX_DATAERR\n\n"
	"    Exit code that means the input data was incorrect.\n\n"
	"    Availability: Unix.\n\n"
	"os.EX_NOINPUT\n\n"
	"    Exit code that means an input file did not exist or was not readable.\n\n"
	"    Availability: Unix.\n\n"
	"os.EX_NOUSER\n\n"
	"    Exit code that means a specified user did not exist.\n\n"
	"    Availability: Unix.\n\n"
	"os.EX_NOHOST\n\n"
	"    Exit code that means a specified host did not exist.\n\n"
	"    Availability: Unix.\n\n"
	"os.EX_UNAVAILABLE\n\n"
	"    Exit code that means that a required service is unavailable.\n\n"
	"    Availability: Unix.\n\n"
	"os.EX_SOFTWARE\n\n"
	"    Exit code that means an internal software error was detected.\n\n"
	"    Availability: Unix.\n\n"
	"os.EX_OSERR\n\n"
	"    Exit code that means an operating system error was detected, such as the inability to fork or create a pipe.\n\n"
	"    Availability: Unix.\n\n"
	"os.EX_OSFILE\n\n"
	"    Exit code that means some system file did not exist, could not be opened, or had some other kind of error.\n\n"
	"    Availability: Unix.\n\n"
	"os.EX_CANTCREAT\n\n"
	"    Exit code that means a user specified output file could not be created.\n\n"
	"    Availability: Unix.\n\n"
	"os.EX_IOERR\n\n"
	"    Exit code that means that an error occurred while doing I/O on some file.\n\n"
	"    Availability: Unix.\n\n"
	"os.EX_TEMPFAIL\n\n"
	"    Exit code that means a temporary failure occurred. This indicates something that may not really be an error, such as a network connection that couldn’t be made during a retryable operation.\n\n"
	"    Availability: Unix.\n\n"
	"os.EX_PROTOCOL\n\n"
	"    Exit code that means that a protocol exchange was illegal, invalid, or not understood.\n\n"
	"    Availability: Unix.\n\n"
	"os.EX_NOPERM\n\n"
	"    Exit code that means that there were insufficient permissions to perform the operation (but not intended for file system problems).\n\n"
	"    Availability: Unix.\n\n"
	"os.EX_CONFIG\n\n"
	"    Exit code that means that some kind of configuration error occurred.\n\n"
	"    Availability: Unix.\n\n"
	"os.EX_NOTFOUND\n\n"
	"    Exit code that means something like “an entry was not found”.\n\n"
	"    Availability: Unix.\n\n"
	"os.fork()\n\n"
	"    Fork a child process. Return 0 in the child and the child’s process id in the parent. If an error occurs OSError is raised.\n\n"
	"    Note that some platforms including FreeBSD <= 6.3 and Cygwin have known issues when using fork() from a thread.\n\n"
	"    Raises an auditing event os.fork with no arguments.\n\n"
	"    Changed in version 3.8: Calling fork() in a subinterpreter is no longer supported (RuntimeError is raised).\n\n"
	"    Warning\n\n"
	"    See ssl for applications that use the SSL module with fork().\n\n"
	"    Availability: Unix.\n\n"
	"os.forkpty()\n\n"
	"    Fork a child process, using a new pseudo-terminal as the child’s controlling terminal. Return a pair of (pid, fd), where pid is 0 in the child, the new child’s process id in the parent, and fd is the file descriptor of the master end of the pseudo-terminal. For a more portable approach, use the pty module. If an error occurs OSError is raised.\n\n"
	"    Raises an auditing event os.forkpty with no arguments.\n\n"
	"    Changed in version 3.8: Calling forkpty() in a subinterpreter is no longer supported (RuntimeError is raised).\n\n"
	"    Availability: some flavors of Unix.\n\n"
	"os.kill(pid, sig)\n\n"
	"    Send signal sig to the process pid. Constants for the specific signals available on the host platform are defined in the signal module.\n\n"
	"    Windows: The signal.CTRL_C_EVENT and signal.CTRL_BREAK_EVENT signals are special signals which can only be sent to console processes which share a common console window, e.g., some subprocesses. Any other value for sig will cause the process to be unconditionally killed by the TerminateProcess API, and the exit code will be set to sig. The Windows version of kill() additionally takes process handles to be killed.\n\n"
	"    See also signal.pthread_kill().\n\n"
	"    Raises an auditing event os.kill with arguments pid, sig.\n\n"
	"    New in version 3.2: Windows support.\n\n"
	"os.killpg(pgid, sig)\n\n"
	"    Send the signal sig to the process group pgid.\n\n"
	"    Raises an auditing event os.killpg with arguments pgid, sig.\n\n"
	"    Availability: Unix.\n\n"
	"os.nice(increment)\n\n"
	"    Add increment to the process’s “niceness”. Return the new niceness.\n\n"
	"    Availability: Unix.\n\n"
	"os.pidfd_open(pid, flags=0)\n\n"
	"    Return a file descriptor referring to the process pid. This descriptor can be used to perform process management without races and signals. The flags argument is provided for future extensions; no flag values are currently defined.\n\n"
	"    See the pidfd_open(2) man page for more details.\n\n"
	"    Availability: Linux 5.3+\n\n"
	"    New in version 3.9.\n\n"
	"os.plock(op)\n\n"
	"    Lock program segments into memory. The value of op (defined in <sys/lock.h>) determines which segments are locked.\n\n"
	"    Availability: Unix.\n\n"
	"os.popen(cmd, mode='r', buffering=-1)\n\n"
	"    Open a pipe to or from command cmd. The return value is an open file object connected to the pipe, which can be read or written depending on whether mode is 'r' (default) or 'w'. The buffering argument has the same meaning as the corresponding argument to the built-in open() function. The returned file object reads or writes text strings rather than bytes.\n\n"
	"    The close method returns None if the subprocess exited successfully, or the subprocess’s return code if there was an error. On POSIX systems, if the return code is positive it represents the return value of the process left-shifted by one byte. If the return code is negative, the process was terminated by the signal given by the negated value of the return code. (For example, the return value might be - signal.SIGKILL if the subprocess was killed.) On Windows systems, the return value contains the signed integer return code from the child process.\n\n"
	"    On Unix, waitstatus_to_exitcode() can be used to convert the close method result (exit status) into an exit code if it is not None. On Windows, the close method result is directly the exit code (or None).\n\n"
	"    This is implemented using subprocess.Popen; see that class’s documentation for more powerful ways to manage and communicate with subprocesses.\n\n"
	"os.posix_spawn(path, argv, env, *, file_actions=None, setpgroup=None, resetids=False, setsid=False, setsigmask=(), setsigdef=(), scheduler=None)\n\n"
	"    Wraps the posix_spawn() C library API for use from Python.\n\n"
	"    Most users should use subprocess.run() instead of posix_spawn().\n\n"
	"    The positional-only arguments path, args, and env are similar to execve().\n\n"
	"    The path parameter is the path to the executable file. The path should contain a directory. Use posix_spawnp() to pass an executable file without directory.\n\n"
	"    The file_actions argument may be a sequence of tuples describing actions to take on specific file descriptors in the child process between the C library implementation’s fork() and exec() steps. The first item in each tuple must be one of the three type indicator listed below describing the remaining tuple elements:\n\n"
	"    os.POSIX_SPAWN_OPEN\n\n"
	"        (os.POSIX_SPAWN_OPEN, fd, path, flags, mode)\n\n"
	"        Performs os.dup2(os.open(path, flags, mode), fd).\n\n"
	"    os.POSIX_SPAWN_CLOSE\n\n"
	"        (os.POSIX_SPAWN_CLOSE, fd)\n\n"
	"        Performs os.close(fd).\n\n"
	"    os.POSIX_SPAWN_DUP2\n\n"
	"        (os.POSIX_SPAWN_DUP2, fd, new_fd)\n\n"
	"        Performs os.dup2(fd, new_fd).\n\n"
	"    These tuples correspond to the C library posix_spawn_file_actions_addopen(), posix_spawn_file_actions_addclose(), and posix_spawn_file_actions_adddup2() API calls used to prepare for the posix_spawn() call itself.\n\n"
	"    The setpgroup argument will set the process group of the child to the value specified. If the value specified is 0, the child’s process group ID will be made the same as its process ID. If the value of setpgroup is not set, the child will inherit the parent’s process group ID. This argument corresponds to the C library POSIX_SPAWN_SETPGROUP flag.\n\n"
	"    If the resetids argument is True it will reset the effective UID and GID of the child to the real UID and GID of the parent process. If the argument is False, then the child retains the effective UID and GID of the parent. In either case, if the set-user-ID and set-group-ID permission bits are enabled on the executable file, their effect will override the setting of the effective UID and GID. This argument corresponds to the C library POSIX_SPAWN_RESETIDS flag.\n\n"
	"    If the setsid argument is True, it will create a new session ID for posix_spawn. setsid requires POSIX_SPAWN_SETSID or POSIX_SPAWN_SETSID_NP flag. Otherwise, NotImplementedError is raised.\n\n"
	"    The setsigmask argument will set the signal mask to the signal set specified. If the parameter is not used, then the child inherits the parent’s signal mask. This argument corresponds to the C library POSIX_SPAWN_SETSIGMASK flag.\n\n"
	"    The sigdef argument will reset the disposition of all signals in the set specified. This argument corresponds to the C library POSIX_SPAWN_SETSIGDEF flag.\n\n"
	"    The scheduler argument must be a tuple containing the (optional) scheduler policy and an instance of sched_param with the scheduler parameters. A value of None in the place of the scheduler policy indicates that is not being provided. This argument is a combination of the C library POSIX_SPAWN_SETSCHEDPARAM and POSIX_SPAWN_SETSCHEDULER flags.\n\n"
	"    Raises an auditing event os.posix_spawn with arguments path, argv, env.\n\n"
	"    New in version 3.8.\n\n"
	"    Availability: Unix.\n\n"
	"os.posix_spawnp(path, argv, env, *, file_actions=None, setpgroup=None, resetids=False, setsid=False, setsigmask=(), setsigdef=(), scheduler=None)\n\n"
	"    Wraps the posix_spawnp() C library API for use from Python.\n\n"
	"    Similar to posix_spawn() except that the system searches for the executable file in the list of directories specified by the PATH environment variable (in the same way as for execvp(3)).\n\n"
	"    Raises an auditing event os.posix_spawn with arguments path, argv, env.\n\n"
	"    New in version 3.8.\n\n"
	"    Availability: See posix_spawn() documentation.\n\n"
	"os.register_at_fork(*, before=None, after_in_parent=None, after_in_child=None)\n\n"
	"    Register callables to be executed when a new child process is forked using os.fork() or similar process cloning APIs. The parameters are optional and keyword-only. Each specifies a different call point.\n\n"
	"        before is a function called before forking a child process.\n\n"
	"        after_in_parent is a function called from the parent process after forking a child process.\n\n"
	"        after_in_child is a function called from the child process.\n\n"
	"    These calls are only made if control is expected to return to the Python interpreter. A typical subprocess launch will not trigger them as the child is not going to re-enter the interpreter.\n\n"
	"    Functions registered for execution before forking are called in reverse registration order. Functions registered for execution after forking (either in the parent or in the child) are called in registration order.\n\n"
	"    Note that fork() calls made by third-party C code may not call those functions, unless it explicitly calls PyOS_BeforeFork(), PyOS_AfterFork_Parent() and PyOS_AfterFork_Child().\n\n"
	"    There is no way to unregister a function.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.7.\n\n"
	"os.spawnl(mode, path, ...)\n"
	"os.spawnle(mode, path, ..., env)\n"
	"os.spawnlp(mode, file, ...)\n"
	"os.spawnlpe(mode, file, ..., env)\n"
	"os.spawnv(mode, path, args)\n"
	"os.spawnve(mode, path, args, env)\n"
	"os.spawnvp(mode, file, args)\n"
	"os.spawnvpe(mode, file, args, env)\n\n"
	"    Execute the program path in a new process.\n\n"
	"    (Note that the subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using these functions. Check especially the Replacing Older Functions with the subprocess Module section.)\n\n"
	"    If mode is P_NOWAIT, this function returns the process id of the new process; if mode is P_WAIT, returns the process’s exit code if it exits normally, or -signal, where signal is the signal that killed the process. On Windows, the process id will actually be the process handle, so can be used with the waitpid() function.\n\n"
	"    Note on VxWorks, this function doesn’t return -signal when the new process is killed. Instead it raises OSError exception.\n\n"
	"    The “l” and “v” variants of the spawn* functions differ in how command-line arguments are passed. The “l” variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the spawnl*() functions. The “v” variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter. In either case, the arguments to the child process must start with the name of the command being run.\n\n"
	"    The variants which include a second “p” near the end (spawnlp(), spawnlpe(), spawnvp(), and spawnvpe()) will use the PATH environment variable to locate the program file. When the environment is being replaced (using one of the spawn*e variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable. The other variants, spawnl(), spawnle(), spawnv(), and spawnve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path.\n\n"
	"    For spawnle(), spawnlpe(), spawnve(), and spawnvpe() (note that these all end in “e”), the env parameter must be a mapping which is used to define the environment variables for the new process (they are used instead of the current process’ environment); the functions spawnl(), spawnlp(), spawnv(), and spawnvp() all cause the new process to inherit the environment of the current process. Note that keys and values in the env dictionary must be strings; invalid keys or values will cause the function to fail, with a return value of 127.\n\n"
	"    As an example, the following calls to spawnlp() and spawnvpe() are equivalent:\n\n"
	"    import os\n"
	"    os.spawnlp(os.P_WAIT, 'cp', 'cp', 'index.html', '/dev/null')\n\n"
	"    L = ['cp', 'index.html', '/dev/null']\n"
	"    os.spawnvpe(os.P_WAIT, 'cp', L, os.environ)\n\n"
	"    Raises an auditing event os.spawn with arguments mode, path, args, env.\n\n"
	"    Availability: Unix, Windows. spawnlp(), spawnlpe(), spawnvp() and spawnvpe() are not available on Windows. spawnle() and spawnve() are not thread-safe on Windows; we advise you to use the subprocess module instead.\n\n"
	"    Changed in version 3.6: Accepts a path-like object.\n\n"
	"os.P_NOWAIT\n"
	"os.P_NOWAITO\n\n"
	"    Possible values for the mode parameter to the spawn* family of functions. If either of these values is given, the spawn*() functions will return as soon as the new process has been created, with the process id as the return value.\n\n"
	"    Availability: Unix, Windows.\n\n"
	"os.P_WAIT\n\n"
	"    Possible value for the mode parameter to the spawn* family of functions. If this is given as mode, the spawn*() functions will not return until the new process has run to completion and will return the exit code of the process the run is successful, or -signal if a signal kills the process.\n\n"
	"    Availability: Unix, Windows.\n\n"
	"os.P_DETACH\n"
	"os.P_OVERLAY\n\n"
	"    Possible values for the mode parameter to the spawn* family of functions. These are less portable than those listed above. P_DETACH is similar to P_NOWAIT, but the new process is detached from the console of the calling process. If P_OVERLAY is used, the current process will be replaced; the spawn* function will not return.\n\n"
	"    Availability: Windows.\n\n"
	"os.startfile(path[, operation])\n\n"
	"    Start a file with its associated application.\n\n"
	"    When operation is not specified or 'open', this acts like double-clicking the file in Windows Explorer, or giving the file name as an argument to the start command from the interactive command shell: the file is opened with whatever application (if any) its extension is associated.\n\n"
	"    When another operation is given, it must be a “command verb” that specifies what should be done with the file. Common verbs documented by Microsoft are 'print' and 'edit' (to be used on files) as well as 'explore' and 'find' (to be used on directories).\n\n"
	"    startfile() returns as soon as the associated application is launched. There is no option to wait for the application to close, and no way to retrieve the application’s exit status. The path parameter is relative to the current directory. If you want to use an absolute path, make sure the first character is not a slash ('/'); the underlying Win32 ShellExecute() function doesn’t work if it is. Use the os.path.normpath() function to ensure that the path is properly encoded for Win32.\n\n"
	"    To reduce interpreter startup overhead, the Win32 ShellExecute() function is not resolved until this function is first called. If the function cannot be resolved, NotImplementedError will be raised.\n\n"
	"    Raises an auditing event os.startfile with arguments path, operation.\n\n"
	"    Availability: Windows.\n\n"
	"os.system(command)\n\n"
	"    Execute the command (a string) in a subshell. This is implemented by calling the Standard C function system(), and has the same limitations. Changes to sys.stdin, etc. are not reflected in the environment of the executed command. If command generates any output, it will be sent to the interpreter standard output stream. The C standard does not specify the meaning of the return value of the C function, so the return value of the Python function is system-dependent.\n\n"
	"    On Unix, the return value is the exit status of the process encoded in the format specified for wait().\n\n"
	"    On Windows, the return value is that returned by the system shell after running command. The shell is given by the Windows environment variable COMSPEC: it is usually cmd.exe, which returns the exit status of the command run; on systems using a non-native shell, consult your shell documentation.\n\n"
	"    The subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function. See the Replacing Older Functions with the subprocess Module section in the subprocess documentation for some helpful recipes.\n\n"
	"    On Unix, waitstatus_to_exitcode() can be used to convert the result (exit status) into an exit code. On Windows, the result is directly the exit code.\n\n"
	"    Raises an auditing event os.system with argument command.\n\n"
	"    Availability: Unix, Windows.\n\n"
	"os.times()\n\n"
	"    Returns the current global process times. The return value is an object with five attributes:\n\n"
	"        user - user time\n\n"
	"        system - system time\n\n"
	"        children_user - user time of all child processes\n\n"
	"        children_system - system time of all child processes\n\n"
	"        elapsed - elapsed real time since a fixed point in the past\n\n"
	"    For backwards compatibility, this object also behaves like a five-tuple containing user, system, children_user, children_system, and elapsed in that order.\n\n"
	"    See the Unix manual page times(2) and times(3) manual page on Unix or the GetProcessTimes MSDN on Windows. On Windows, only user and system are known; the other attributes are zero.\n\n"
	"    Availability: Unix, Windows.\n\n"
	"    Changed in version 3.3: Return type changed from a tuple to a tuple-like object with named attributes.\n\n"
	"os.wait()\n\n"
	"    Wait for completion of a child process, and return a tuple containing its pid and exit status indication: a 16-bit number, whose low byte is the signal number that killed the process, and whose high byte is the exit status (if the signal number is zero); the high bit of the low byte is set if a core file was produced.\n\n"
	"    waitstatus_to_exitcode() can be used to convert the exit status into an exit code.\n\n"
	"    Availability: Unix.\n\n"
	"    See also\n\n"
	"    waitpid() can be used to wait for the completion of a specific child process and has more options.\n\n"
	"os.waitid(idtype, id, options)\n\n"
	"    Wait for the completion of one or more child processes. idtype can be P_PID, P_PGID, P_ALL, or P_PIDFD on Linux. id specifies the pid to wait on. options is constructed from the ORing of one or more of WEXITED, WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT. The return value is an object representing the data contained in the siginfo_t structure, namely: si_pid, si_uid, si_signo, si_status, si_code or None if WNOHANG is specified and there are no children in a waitable state.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3.\n\n"
	"os.P_PID\n"
	"os.P_PGID\n"
	"os.P_ALL\n\n"
	"    These are the possible values for idtype in waitid(). They affect how id is interpreted.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3.\n\n"
	"os.P_PIDFD\n\n"
	"    This is a Linux-specific idtype that indicates that id is a file descriptor that refers to a process.\n\n"
	"    Availability: Linux 5.4+\n\n"
	"    New in version 3.9.\n\n"
	"os.WEXITED\n"
	"os.WSTOPPED\n"
	"os.WNOWAIT\n\n"
	"    Flags that can be used in options in waitid() that specify what child signal to wait for.\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3.\n\n"
	"os.CLD_EXITED\n"
	"os.CLD_KILLED\n"
	"os.CLD_DUMPED\n"
	"os.CLD_TRAPPED\n"
	"os.CLD_STOPPED\n"
	"os.CLD_CONTINUED\n\n"
	"    These are the possible values for si_code in the result returned by waitid().\n\n"
	"    Availability: Unix.\n\n"
	"    New in version 3.3.\n\n"
	"    Changed in version 3.9: Added CLD_KILLED and CLD_STOPPED values.\n\n"
	"os.waitpid(pid, options)\n\n"
	"    The details of this function differ on Unix and Windows.\n\n"
	"    On Unix: Wait for completion of a child process given by process id pid, and return a tuple containing its process id and exit status indication (encoded as for wait()). The semantics of the call are affected by the value of the integer options, which should be 0 for normal operation.\n\n"
	"    If pid is greater than 0, waitpid() requests status information for that specific process. If pid is 0, the request is for the status of any child in the process group of the current process. If pid is -1, the request pertains to any child of the current process. If pid is less than -1, status is requested for any process in the process group -pid (the absolute value of pid).\n\n"
	"    An OSError is raised with the value of errno when the syscall returns -1.\n\n"
	"    On Windows: Wait for completion of a process given by process handle pid, and return a tuple containing pid, and its exit status shifted left by 8 bits (shifting makes cross-platform use of the function easier). A pid less than or equal to 0 has no special meaning on Windows, and raises an exception. The value of integer options has no effect. pid can refer to any process whose id is known, not necessarily a child process. The spawn* functions called with P_NOWAIT return suitable process handles.\n\n"
	"    waitstatus_to_exitcode() can be used to convert the exit status into an exit code.\n\n"
	"    Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an InterruptedError exception (see PEP 475 for the rationale).\n\n"
	"os.wait3(options)\n\n"
	"    Similar to waitpid(), except no process id argument is given and a 3-element tuple containing the child’s process id, exit status indication, and resource usage information is returned. Refer to resource.getrusage() for details on resource usage information. The option argument is the same as that provided to waitpid() and wait4().\n\n"
	"    waitstatus_to_exitcode() can be used to convert the exit status into an exitcode.\n\n"
	"    Availability: Unix.\n\n"
	"os.wait4(pid, options)\n\n"
	"    Similar to waitpid(), except a 3-element tuple, containing the child’s process id, exit status indication, and resource usage information is returned. Refer to resource.getrusage() for details on resource usage information. The arguments to wait4() are the same as those provided to waitpid().\n\n"
	"    waitstatus_to_exitcode() can be used to convert the exit status into an exitcode.\n\n"
	"    Availability: Unix.\n\n"
	"os.waitstatus_to_exitcode(status)\n\n"
	"    Convert a wait status to an exit code.\n\n"
	"    On Unix:\n\n"
	"        If the process exited normally (if WIFEXITED(status) is true), return the process exit status (return WEXITSTATUS(status)): result greater than or equal to 0.\n\n"
	"        If the process was terminated by a signal (if WIFSIGNALED(status) is true), return -signum where signum is the number of the signal that caused the process to terminate (return -WTERMSIG(status)): result less than 0.\n\n"
	"        Otherwise, raise a ValueError.\n\n"
	"    On Windows, return status shifted right by 8 bits.\n\n"
	"    On Unix, if the process is being traced or if waitpid() was called with WUNTRACED option, the caller must first check if WIFSTOPPED(status) is true. This function must not be called if WIFSTOPPED(status) is true.\n\n"
	"    See also\n\n"
	"    WIFEXITED(), WEXITSTATUS(), WIFSIGNALED(), WTERMSIG(), WIFSTOPPED(), WSTOPSIG() functions.\n\n"
	"    New in version 3.9.\n\n"
	"os.WNOHANG\n\n"
	"    The option for waitpid() to return immediately if no child process status is available immediately. The function returns (0, 0) in this case.\n\n"
	"    Availability: Unix.\n\n"
	"os.WCONTINUED\n\n"
	"    This option causes child processes to be reported if they have been continued from a job control stop since their status was last reported.\n\n"
	"    Availability: some Unix systems.\n\n"
	"os.WUNTRACED\n\n"
	"    This option causes child processes to be reported if they have been stopped but their current state has not been reported since they were stopped.\n\n"
	"    Availability: Unix.\n\n"
	"The following functions take a process status code as returned by system(), wait(), or waitpid() as a parameter. They may be used to determine the disposition of a process.\n\n"
	"os.WCOREDUMP(status)\n\n"
	"    Return True if a core dump was generated for the process, otherwise return False.\n\n"
	"    This function should be employed only if WIFSIGNALED() is true.\n\n"
	"    Availability: Unix.\n\n"
	"os.WIFCONTINUED(status)\n\n"
	"    Return True if a stopped child has been resumed by delivery of SIGCONT (if the process has been continued from a job control stop), otherwise return False.\n\n"
	"    See WCONTINUED option.\n\n"
	"    Availability: Unix.\n\n"
	"os.WIFSTOPPED(status)\n\n"
	"    Return True if the process was stopped by delivery of a signal, otherwise return False.\n\n"
	"    WIFSTOPPED() only returns True if the waitpid() call was done using WUNTRACED option or when the process is being traced (see ptrace(2)).\n\n"
	"    Availability: Unix.\n\n"
	"os.WIFSIGNALED(status)\n\n"
	"    Return True if the process was terminated by a signal, otherwise return False.\n\n"
	"    Availability: Unix.\n\n"
	"os.WIFEXITED(status)\n\n"
	"    Return True if the process exited terminated normally, that is, by calling exit() or _exit(), or by returning from main(); otherwise return False.\n\n"
	"    Availability: Unix.\n\n"
	"os.WEXITSTATUS(status)\n\n"
	"    Return the process exit status.\n\n"
	"    This function should be employed only if WIFEXITED() is true.\n\n"
	"    Availability: Unix.\n\n"
	"os.WSTOPSIG(status)\n\n"
	"    Return the signal which caused the process to stop.\n\n"
	"    This function should be employed only if WIFSTOPPED() is true.\n\n"
	"    Availability: Unix.\n\n"
	"os.WTERMSIG(status)\n\n"
	"    Return the number of the signal that caused the process to terminate.\n\n"
	"    This function should be employed only if WIFSIGNALED() is true.\n\n"
	"    Availability: Unix.\n\n"
	"Interface to the scheduler\n\n"
	"These functions control how a process is allocated CPU time by the operating system. They are only available on some Unix platforms. For more detailed information, consult your Unix manpages.\n\n"
	"New in version 3.3.\n\n"
	"The following scheduling policies are exposed if they are supported by the operating system.\n\n"
	"os.SCHED_OTHER\n\n"
	"    The default scheduling policy.\n\n"
	"os.SCHED_BATCH\n\n"
	"    Scheduling policy for CPU-intensive processes that tries to preserve interactivity on the rest of the computer.\n\n"
	"os.SCHED_IDLE\n\n"
	"    Scheduling policy for extremely low priority background tasks.\n\n"
	"os.SCHED_SPORADIC\n\n"
	"    Scheduling policy for sporadic server programs.\n\n"
	"os.SCHED_FIFO\n\n"
	"    A First In First Out scheduling policy.\n\n"
	"os.SCHED_RR\n\n"
	"    A round-robin scheduling policy.\n\n"
	"os.SCHED_RESET_ON_FORK\n\n"
	"    This flag can be OR’ed with any other scheduling policy. When a process with this flag set forks, its child’s scheduling policy and priority are reset to the default.\n\n"
	"class os.sched_param(sched_priority)\n\n"
	"    This class represents tunable scheduling parameters used in sched_setparam(), sched_setscheduler(), and sched_getparam(). It is immutable.\n\n"
	"    At the moment, there is only one possible parameter:\n\n"
	"    sched_priority\n\n"
	"        The scheduling priority for a scheduling policy.\n\n"
	"os.sched_get_priority_min(policy)\n\n"
	"    Get the minimum priority value for policy. policy is one of the scheduling policy constants above.\n\n"
	"os.sched_get_priority_max(policy)\n\n"
	"    Get the maximum priority value for policy. policy is one of the scheduling policy constants above.\n\n"
	"os.sched_setscheduler(pid, policy, param)\n\n"
	"    Set the scheduling policy for the process with PID pid. A pid of 0 means the calling process. policy is one of the scheduling policy constants above. param is a sched_param instance.\n\n"
	"os.sched_getscheduler(pid)\n\n"
	"    Return the scheduling policy for the process with PID pid. A pid of 0 means the calling process. The result is one of the scheduling policy constants above.\n\n"
	"os.sched_setparam(pid, param)\n\n"
	"    Set the scheduling parameters for the process with PID pid. A pid of 0 means the calling process. param is a sched_param instance.\n\n"
	"os.sched_getparam(pid)\n\n"
	"    Return the scheduling parameters as a sched_param instance for the process with PID pid. A pid of 0 means the calling process.\n\n"
	"os.sched_rr_get_interval(pid)\n\n"
	"    Return the round-robin quantum in seconds for the process with PID pid. A pid of 0 means the calling process.\n\n"
	"os.sched_yield()\n\n"
	"    Voluntarily relinquish the CPU.\n\n"
	"os.sched_setaffinity(pid, mask)\n\n"
	"    Restrict the process with PID pid (or the current process if zero) to a set of CPUs. mask is an iterable of integers representing the set of CPUs to which the process should be restricted.\n\n"
	"os.sched_getaffinity(pid)\n\n"
	"    Return the set of CPUs the process with PID pid (or the current process if zero) is restricted to.\n\n"
	"Miscellaneous System Information\n\n"
	"os.confstr(name)\n\n"
	"    Return string-valued system configuration values. name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX, Unix 95, Unix 98, and others). Some platforms define additional names as well. The names known to the host operating system are given as the keys of the confstr_names dictionary. For configuration variables not included in that mapping, passing an integer for name is also accepted.\n\n"
	"    If the configuration value specified by name isn’t defined, None is returned.\n\n"
	"    If name is a string and is not known, ValueError is raised. If a specific value for name is not supported by the host system, even if it is included in confstr_names, an OSError is raised with errno.EINVAL for the error number.\n\n"
	"    Availability: Unix.\n\n"
	"os.confstr_names\n\n"
	"    Dictionary mapping names accepted by confstr() to the integer values defined for those names by the host operating system. This can be used to determine the set of names known to the system.\n\n"
	"    Availability: Unix.\n\n"
	"os.cpu_count()\n\n"
	"    Return the number of CPUs in the system. Returns None if undetermined.\n\n"
	"    This number is not equivalent to the number of CPUs the current process can use. The number of usable CPUs can be obtained with len(os.sched_getaffinity(0))\n\n"
	"    New in version 3.4.\n\n"
	"os.getloadavg()\n\n"
	"    Return the number of processes in the system run queue averaged over the last 1, 5, and 15 minutes or raises OSError if the load average was unobtainable.\n\n"
	"    Availability: Unix.\n\n"
	"os.sysconf(name)\n\n"
	"    Return integer-valued system configuration values. If the configuration value specified by name isn’t defined, -1 is returned. The comments regarding the name parameter for confstr() apply here as well; the dictionary that provides information on the known names is given by sysconf_names.\n\n"
	"    Availability: Unix.\n\n"
	"os.sysconf_names\n\n"
	"    Dictionary mapping names accepted by sysconf() to the integer values defined for those names by the host operating system. This can be used to determine the set of names known to the system.\n\n"
	"    Availability: Unix.\n\n"
	"The following data values are used to support path manipulation operations. These are defined for all platforms.\n\n"
	"Higher-level operations on pathnames are defined in the os.path module.\n\n"
	"os.curdir\n\n"
	"    The constant string used by the operating system to refer to the current directory. This is '.' for Windows and POSIX. Also available via os.path.\n\n"
	"os.pardir\n\n"
	"    The constant string used by the operating system to refer to the parent directory. This is '..' for Windows and POSIX. Also available via os.path.\n\n"
	"os.sep\n\n"
	"    The character used by the operating system to separate pathname components. This is '/' for POSIX and '\\\\' for Windows. Note that knowing this is not sufficient to be able to parse or concatenate pathnames — use os.path.split() and os.path.join() — but it is occasionally useful. Also available via os.path.\n\n"
	"os.altsep\n\n"
	"    An alternative character used by the operating system to separate pathname components, or None if only one separator character exists. This is set to '/' on Windows systems where sep is a backslash. Also available via os.path.\n\n"
	"os.extsep\n\n"
	"    The character which separates the base filename from the extension; for example, the '.' in os.py. Also available via os.path.\n\n"
	"os.pathsep\n\n"
	"    The character conventionally used by the operating system to separate search path components (as in PATH), such as ':' for POSIX or ';' for Windows. Also available via os.path.\n\n"
	"os.defpath\n\n"
	"    The default search path used by exec*p* and spawn*p* if the environment doesn’t have a 'PATH' key. Also available via os.path.\n\n"
	"os.linesep\n\n"
	"    The string used to separate (or, rather, terminate) lines on the current platform. This may be a single character, such as '\\n' for POSIX, or multiple characters, for example, '\\r\\n' for Windows. Do not use os.linesep as a line terminator when writing files opened in text mode (the default); use a single '\\n' instead, on all platforms.\n\n"
	"os.devnull\n\n"
	"    The file path of the null device. For example: '/dev/null' for POSIX, 'nul' for Windows. Also available via os.path.\n\n"
	"os.RTLD_LAZY\n"
	"os.RTLD_NOW\n"
	"os.RTLD_GLOBAL\n"
	"os.RTLD_LOCAL\n"
	"os.RTLD_NODELETE\n"
	"os.RTLD_NOLOAD\n"
	"os.RTLD_DEEPBIND\n\n"
	"    Flags for use with the setdlopenflags() and getdlopenflags() functions. See the Unix manual page dlopen(3) for what the different flags mean.\n\n"
	"    New in version 3.3.\n\n"
	"Random numbers\n\n"
	"os.getrandom(size, flags=0)\n\n"
	"    Get up to size random bytes. The function can return less bytes than requested.\n\n"
	"    These bytes can be used to seed user-space random number generators or for cryptographic purposes.\n\n"
	"    getrandom() relies on entropy gathered from device drivers and other sources of environmental noise. Unnecessarily reading large quantities of data will have a negative impact on other users of the /dev/random and /dev/urandom devices.\n\n"
	"    The flags argument is a bit mask that can contain zero or more of the following values ORed together: os.GRND_RANDOM and GRND_NONBLOCK.\n\n"
	"    See also the Linux getrandom() manual page.\n\n"
	"    Availability: Linux 3.17 and newer.\n\n"
	"    New in version 3.6.\n\n"
	"os.urandom(size)\n\n"
	"    Return a string of size random bytes suitable for cryptographic use.\n\n"
	"    This function returns random bytes from an OS-specific randomness source. The returned data should be unpredictable enough for cryptographic applications, though its exact quality depends on the OS implementation.\n\n"
	"    On Linux, if the getrandom() syscall is available, it is used in blocking mode: block until the system urandom entropy pool is initialized (128 bits of entropy are collected by the kernel). See the PEP 524 for the rationale. On Linux, the getrandom() function can be used to get random bytes in non-blocking mode (using the GRND_NONBLOCK flag) or to poll until the system urandom entropy pool is initialized.\n\n"
	"    On a Unix-like system, random bytes are read from the /dev/urandom device. If the /dev/urandom device is not available or not readable, the NotImplementedError exception is raised.\n\n"
	"    On Windows, it will use CryptGenRandom().\n\n"
	"    See also\n\n"
	"    The secrets module provides higher level functions. For an easy-to-use interface to the random number generator provided by your platform, please see random.SystemRandom.\n\n"
	"    Changed in version 3.6.0: On Linux, getrandom() is now used in blocking mode to increase the security.\n\n"
	"    Changed in version 3.5.2: On Linux, if the getrandom() syscall blocks (the urandom entropy pool is not initialized yet), fall back on reading /dev/urandom.\n\n"
	"    Changed in version 3.5: On Linux 3.17 and newer, the getrandom() syscall is now used when available. On OpenBSD 5.6 and newer, the C getentropy() function is now used. These functions avoid the usage of an internal file descriptor.\n\n"
	"os.GRND_NONBLOCK\n\n"
	"    By default, when reading from /dev/random, getrandom() blocks if no random bytes are available, and when reading from /dev/urandom, it blocks if the entropy pool has not yet been initialized.\n\n"
	"    If the GRND_NONBLOCK flag is set, then getrandom() does not block in these cases, but instead immediately raises BlockingIOError.\n\n"
	"    New in version 3.6.\n\n"
	"os.GRND_RANDOM\n\n"
	"    If this bit is set, then random bytes are drawn from the /dev/random pool instead of the /dev/urandom pool.")

matches = re.finditer(regex, test_str, re.MULTILINE)

for matchNum, match in enumerate(matches, start=1):

    print ("{match}".format(match = match.group()))
    
    # print ("Match {matchNum} was found at {start}-{end}: {match}".format(matchNum = matchNum, start = match.start(), end = match.end(), match = match.group()))
    
    for groupNum in range(0, len(match.groups())):
        groupNum = groupNum + 1
        
        # print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = match.start(groupNum), end = match.end(groupNum), group = match.group(groupNum)))
        groupNum = groupNum
        start = match.start(groupNum)
        end = match.end(groupNum)
        print ("{}".format(group = match.group(groupNum)))
