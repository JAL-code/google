[*Caption:"Spinning up VMs in the Cloud":01*]

[MUSIC]
We've been talking a lot about how the Cloud works,
what the different concepts that play are, and what they mean.
In the next few videos, we'll be showing you how [some common actions that you might
perform on the Cloud look in practice.]
As we've called out, there's a bunch of different Cloud providers that you can use
for your projects, each with some specific advantages depending on what you're trying
to achieve.
And while some terms used by one provider might not exactly match
the ones used by other providers, the concepts are the same.
In these videos, we'll use [the Google Cloud platform to demonstrate our examples
because, well, it's the platform we know best.]
All Cloud providers give you a console that lets you manage the services that
you're using.
This console includes pointers to a lot of different services that
the providers offer.
Seeing all of the options available, it can be a little dizzying at first.
So it's a good idea to start just by familiarizing yourself with the platform
before you try to do something with it.
This can mean, for example, looking at the available menus and options, and figuring
out where the sections that let you use infrastructure-as-a-service are located.
[No matter the exact menu entries, when you want to create a VM running in the Cloud,
there are a bunch of parameters that you need to set.]
These parameters are used by the Cloud infrastructure
to spin up the machine with the settings that we want.
[You'll start by choosing the name assigned to the instance.
This name will later let you identify the instance if you want to connect to it,
modify it, or even delete it.]
[You'll also have to choose the region and zone where the instance is running.]
As we called out in an earlier video, you'll generally want to[ choose a region
that's close to your users so that you provide better performance.]
Another important option that you'll need to select is [the machine type for your VM.]
Cloud providers allow users to configure the characteristics of their virtual
machines to fit their needs.
This means selecting [how many processing units, or virtual CPUs, and
how much memory the virtual machine will be allocated.]
You might be tempted to select the most powerful VM available, but
of course the more powerful the VM, the more money it will cost to run it.
[As a sysadmin, you may need to decide between costs and
processing power to fit the needs of your organization.]
When setting up instances like these, it's a good idea to [start small and
scale as needed.]
On top of the CPU and memory available,
you'll also need to [select the boot disk that the VM will use.]
Each virtual machine running in the Cloud has an associated disk that
contains the operating system it runs and some extra disk space.
[When you create the VM, you select both how much space you want to allocate for
the virtual disk and what operating system you want the machine to run.]
To create these resources, we [can use the web interface or
the command line interface.]
The [web UI can be very useful for
quickly inspecting the parameters that we need to set.]
The [UI will let us compare the different options available and even show us
an estimation of how much money our selected VM would cost per month.]
This is great for experimenting, but it doesn't scale well if we need to quickly
create a bunch of machines or if we want to automate the creation.
In those cases, we'll [use the command line interface, which
lets us specify what we want once, and then use the same parameters many times.]
Using the command line interface lets us [create, modify, and
even delete virtual machines] from our scripts.
This is a great step towards automation, but it doesn't stop there.
We can also [automate the preparation of the contents of those virtual machines.]
Imagine spending an afternoon installing and configuring your new web server.
You can do this on one machine, and the process is fairly straightforward.
You install any necessary software, you modify any configuration settings, and
then make sure that it's working correctly.
But it would be hard to reproduce this exactly on another machine, and
impossible to do it on thousands of machines.
This is where reference images and templating come into play.
[Reference images store the contents of a machine in a reusable format,
while templating is the process of capturing all of the system
configuration to let us create VMS in a repeatable way.]
That exact format of the reference image will depend on the vendor.
But often, the result is a file called a disk image.
[A disk image is a snapshot of a virtual machine's disk at a given point in time.]
[Good templating software lets you copy an entire virtual machine and
use that copy to generate new ones.]
Depending on the software, the disk image might not be an exact copy of the original
machine because some machine data changes, like the hostname and IP address.
But it will [have the data that we need to make it reusable on
lots of virtual machines.]
This can be super helpful if we want [to build a cluster of 10,000 machines
which all have identical software.]
Up next, we'll do a few demos of this process.
We'll show you how we can create new VMs in Google Cloud Console,
how we can customize those VMs, and how we can use templating and
reference images to automate the creation. 

[*Caption:"Creating a New VM Using the GCP Web UI":02*]

Okay, let's get started with creating a virtual machine on our GCP project.
We'll kick things off by [navigating to console.cloud.google.com,]
which is where you'll find the [cloud console for GCP.]
Here, the [first step is to create a project so
that our VMs are associated to that project.]

[create new project]
[Project name: First Cloud Steps]

We need to give our project a name, let's name it First Cloud Steps.
Our project is being created, it takes a couple of seconds.
Now that we have a project, our dashboard has a lot more info.
Next, we want to go to the [enu entry that lets us create virtual machines.]
To do that, we'll go into the [Compute Engine menu, and
select the VM instances entry.]
This screen is pretty empty because we don't have any VMs yet.
We can create a VM by [pressing the Create button.]

[Create INSTANCE]

Here we're showing the many different options that we can set for
this VM that we're creating.
We can set the name, the region and zone, the machine type, the boot disk,
and so on.
We'll start by [calling this machine linux-instance.]
[Now it's time to select the region and zone.]
If we click on the region drop-down,
we can see all the regions that are currently available to create new VMs.
If we click on the zone drop-down we can see the zones available in that region for
new VMs.
For this example, we'll just keep the default regions.
But as we called out, [if you're deploying a service,
you should select something that's close to your users.]
Next, we need to [select the type of machine that we want to use.]
We can select between [general purpose, compute optimized, and memory optimized.]
And among each of those families, we can select a bunch of different machine types.
We can select [how much CPU and how much memory we want our VM to have.]
The right selection will depend on what we plan to do with the computer.
For our example, we'll just keep the default machine.
After selecting the VM, we need to select the disk that we want to use.
The default disk is 10 gigabytes in size and comes with a Debian image on it.
We can select a different size or
different OS by clicking on the Change button.
There's a [long list of available operating systems to choose from.]
The right option will depend on what you're trying to do with your instance.
For this example, we'll choose one of the Ubuntu versions.
We can select which type of disk we want to use,
either the standard disk which is cheaper, or the SSD version which is faster.
And we could also change the size if we needed extra storage for our server.
For now, [we'll just keep the default values here.]
After the boot disk,
we're shown options to determine how access to the machine will work.
This can be very simple or very complex, depending on the rest of your project.
[The default access option allows you to access the instance remotely using SSH], so
we'll go with that one for now.
And finally, [the creation wizard lets us pre-configure some firewall rules.]
Selecting one of these two options would let HTTP or
HTTPS traffic reach our machine.
Of course, there are more firewall rules that you might want to set.
Those can be set later on, after the machine is created.
In a later video, [we'll want to connect to a web server on this machine,
so let's turn HTTP on.]
There are a lot more options we can set, which are tucked away under this link.
We won't look into those now, since the defaults make sense for our test machine.
But you can check them out on your own to see what other parameters you can set.
We're basically ready to create our VM, but before we do that,
[let's click on the command line link.]

[gcloud beta compute --project=bubbly-enigma-314214 instances create linux-instance --zone=us-east1-b --machine-type=e2-medium --subnet=default --network-tier=PREMIUM --maintenance-policy=MIGRATE --service-account=470361308455-compute@developer.gserviceaccount.com --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --tags=http-server --image=ubuntu-1804-bionic-v20210514 --image-project=ubuntu-os-cloud --boot-disk-size=10GB --boot-disk-type=pd-balanced --boot-disk-device-name=linux-instance --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any

gcloud compute --project=bubbly-enigma-314214 firewall-rules create default-allow-http --direction=INGRESS --priority=1000 --network=default --action=ALLOW --rules=tcp:80 --source-ranges=0.0.0.0/0 --target-tags=http-server]


This will show us how we would create the same VM through the command line.
Wow, that's a long command line, but don't worry,
you don't need to understand all of those parameters.
The takeaway here is that you could select all the options that you want to
create the VM that you need, and then copy this command to create a bunch of VMs that
are all exactly the same as the one you selected.
For now, we'll close this window and then create the VM using the Create button.
Our instance is being created, this takes a bit of time.
The system is assigning the necessary resources to our machine, deploying
the operating system image, connecting the network interfaces, and so on.
[Once it's done setting up, we can connect to it using SSH.]
Again, it takes a little while for
the system to set up the keys that we'll use to log on.
But once it's done, we can use the machine remotely.
Let's check that the machine we created is using the OS we selected.
And with that, we've just created a VM using the web interface and
connected to it using SSH, how cool is that?
Once you're logged into the machine,
you can treat it like any normal Linux machine, which is pretty awesome.
[For example, we can get a text version of the weather in our current
location by calling the curl command, which we can use to access web
pages from the command line, and passing in wttr.in as the website.]

[$ cat /etc/lsb-releasee]
[$ curl wttr.in]

Looks like it's overcast in the cloud.
Up next, we'll start experimenting with our VM by deploying a simple web
application to it. 

[*Caption:"Customizing VMs in GCP":03*]

In our last video,
we checked out how to create a single virtual machine in the cloud.
That's cool, but not too useful at cloud scale.
[Remember, cloud scale deployments are often comprised of hundreds or
thousands of machines.]
So creating a single server is only the beginning.
Let's make some [changes to that VM so that we can deploy it at scale.]
Once we're done, we'll use the instance that we configured as the base for
our reference image.
[Remember that a reference image is just a file or
configuration that we can deploy repeatedly and with automated tools.]
This is important because it lets us build scalable services very quickly.
Let's [start by logging into the virtual machine we created in the last video.]

[ssh]

We'll [use git which will let us clone the repository with the code for
the app we want to deploy.]
The repo we've cloned includes a very simple web serving application written in
Python.

[$ git clone https://github.com/blue-kale/hello][does not work]

[alternate]

[git clone https://www.github.com/google/it-cert-automation-practice.git
cd ~/it-cert-automation-practice/Course5/Lab3
sudo cp hello_cloud.py /usr/local/bin/]

[git clone https//www.github.com/google/it-cert-automation-practice.git]

[git@github.com:google/it-cert-automation-practice.git]

[end alternate]

[$ cd hello/]
[$ ls -l]
[$ ./hello_cloud.py]


Let's run it to see what happens.
[Our script prints a single line saying that it's listening for
connections on port 8000.]
[What's happening behind the scenes is that the application is opening a socket and
listening for HTTP connections on that port.]
In this case, it's [running on port 8000.]
And if we were running this locally on our machine, we could connect to that port.
But this is running on a virtual machine in the cloud which has a firewall and
only a couple of ports enabled.
What are our options?
The [script actually lets us pass the port number that it will open as a parameter.]
We want it to [run on the HTTP port that we configured in our last video
which is port 80.]
And because this is a system port, to let our application use it,
we'll need to [run it with admin privileges.]
So let's [stop the running process now by pressing Ctrl+C.]
And then [run it again with sudo and pass port 80 as the parameter.]

[$ sudo ./hello_cloud.py 80]

[Stop sudo 80.]
Now we can [visit the website served by our VM and see its contents.]
Let's navigate to it.
Our [web app is extra symbol.]
It just [prints Hello Cloud to the web page generated when we make a request.
It also prints the Hostname and IP Address of the machine.]
This will help us later on when we deploy the solution at scale.
All right, we have a web serving application running on the HTTP port.
That's nice, but we had to start the application manually so
this doesn't scale.
To get our application to start automatically,
[we need to configure this as a service.]
Fortunately, our repo already includes a service definition that we can use.
Let's check out the contents of that file.
[This is a systemd file,
which is the initializing system used by most modern Linux distributions.]
Don't worry if you don't understand what's going on here.
You don't need to understand the details of this file to know how to deploy
services to the cloud.
Just [notice that the configuration expects the script that we want to execute to be
in /usr/local/bin.]
We need to [copy that file over to there and
then copy the service file to /etc/systemd/system,]
which is the [directory used for configuring systemd services.]
And finally, we [need to tell the systemctl
command that we want to enable this service so that it runs automatically.]

[ $ sudo cp hello_cloud.py /usr/local/bin/]
[ $ sudo cp hello_cloud.service /etc/systemd/system/]
[ $ sudo systemctl enable hello_cloud]


Okay, now that we've done this, anytime this machine starts,
it will start the web app that we've configured and
we'll be able to see the content that we saw before.
Let's try it out by triggering a reboot.

[$ sudo reboot]

We've rebooted the machine.
This will take a while to complete.
It tells us that the connection was lost and
that we can ask our terminal to reconnect.
This will take a bit of time until the machine has finished rebooting and
is ready to receive connections, patience, my friend.
Okay, our VM has rebooted.
We can check if our application is running by using the ps ax command
to get a list of the running processes and filter it so
we keep only the ones matching a pattern using the grep command.

[$ ps ax | grep hello]

In this case, we'll use hello as the pattern.
Yay, our application is now running on startup.
We're almost ready to turn our configured VM into a template for
creating a lot more of them.
But before we do that, we [need to think about how we'll upgrade our web app
when we want to make changes to it.]
There's a bunch of different options here.
[One option is to create a different reference image each time
there's a new version of the app.]
This would mean [deleting all the old VMs] and
[creating new ones based on the new image.]
[Another option is to add a configuration management system to the images so
that we can use that to manage any changes after the VM's created.]
[We already know how to manage changes with Puppet.]
Remember our Puppet Master training from earlier videos?
[Let's install the Puppet client in this instance so
it's ready to use Puppet in the future.]

[$ sudo apt-get update]

[$ sudo apt install puppet]

Now when we looked into the Puppet Server and client setup,
we saw that there was a bunch of steps that we need to run on the client side to
have it ready to apply the rules.
The repo we cloned includes a script we can run
which will do the initial configuration for us.
It will also set the Puppet process to run automatically on boot.
Let's run that now.

[$ ./hello/setup_puppet.sh]

Setup, Now any time this machine starts,
it will serve our website and we want to update that website's content.
We can do that using our Puppet infrastructure.
Nice, our VM is now ready to be used as a basis for
a template, which we can use to create as many instances as we need.
Up next, we'll check out how to create the template and
how to create instances based on it. 

[*Caption:"Templating a Customized VM":04*]


In the last few videos, we created a VM, and then made sure that it was set up to
serve our web app, and to stay updated via Puppet.
We can now use this VM as a basis for creating an instance template, and
then use the template to create a bunch of VMs based on it.
Let's do that.
To create a reference image, we need to have access to the current virtual
disk that's running on the computer.
So the first step to create the image is to stop the VM.

[$ sudo shutdown]

It takes a while for the machine to shut down cleanly.
Once it's finished, we can [click on the machine's name to see all its details, and
then we can click on the boot disk.]
These are the details of the disk attached to the VM.
We can create a snapshot, which is a full copy of the current state of the disk, or
an image, which lets us create a template based on it.
[Let's click create image.]

[Create an image header]

We'll [call our image "webserver-image".]
Here, the creation wizard shows that we'll be creating the image
based on the Linux-instance disk, which is what we want.
For this example, we'll leave the rest of the settings with the default values.
Okay, let's create our image.
This is now creating the image that we'll use for our template.
As we called out earlier, the tools will keep most of the contents of the image,
but remove things that should be different across VMs.
Once it's finished creating, it shows us the list of all images that we can access.
As you can see,
this is a long list that includes a bunch of stuff along with our image.
The other images are public images that we can use to deploy different types of VMs.
All right.
[We're now ready to create our instance template.]

[Instance templates on navigation menu.]

[To do that, we'll go to the instance template option,
and then click create new instance template.]
As usual,
we're shown a wizard that includes a bunch of different options that we can set.
We'll keep most of the defaults, and change only a couple of things.
We'll [name our template web server- template.]
We'll [change the boot disk to use the image we've created.]
In this screen, we can see the list of all the available images.
By default,
the list shows the official operating system images provided by the platform.
For our template, we want to [use the custom Image we've created.]
And finally,
we'll also want to [enable HTTP access to the instances created with this template.]
That's it.
We're ready to create our new template.
This takes a little bit of time to create.
Once it's done, we can create instances based on our images.
We'll do it once more from the web interface, and
then we'll check out how to do it from the command line.
[Let's go back to the VM instances entry, and then click on create instance.]
This time, instead of creating an instance from scratch,
we'll use the template we've prepared.
[We'll name our instance web server-1]
Everything else we'll leave as is.
Check out how it says that it will use the base image we selected,
and that HTTP traffic will be allowed.
All right, we've created our second VM based on the template.
We didn't have to change any options,
because all of the values were already pre-selected in the template.
And the web app that we want is ready to run,
without us having to configure anything.
Let's check that out.  [Click on the server ip address to display Hello Cloud.]


Yes, our application is already running successfully on this machine.
This is great, but
it's still a bit cumbersome if we want to create ten VMs like this one.
For a batch action like that, it's better to use the command line interface.
So let's do that.
[To interact with Google Cloud, we'll be using the gcloud command.]
We've already installed the gcloud command on this machine.
You'll find pointers on how to install gcloud on different platforms in
the next reading.
We'll start by running the gcloud init command, which
sets up the authentication mechanisms between this computer and Google Cloud.

[$ gcloud init]

We need to [authenticate to the Google Cloud system ]to be able to
use the gcloud command to interact with it.
Let's [say yes here.]
This opened a new tab in our browser that we can use to authenticate
with our account.
Let's [follow the process here, and authenticate.]
We're now logged into our cloud account.
We can choose which will be our default project.
Let's [select one here.]
We've selected the default project.
On top of that,
the [initializing wizard lets us select the default region and zone.]
It's a good idea to select this, as the commands that we use in the future
will use that zone and region if we don't specify a different one.
This is a long list.
There are a lot of different zones available for our instances.
[As we called out earlier, when selecting where to run your services,
you should go with the one that's closest to you.]
For this example, we'll just go with Zone 1.
Once we've completed this authentication,
we can use the gcloud command to operate on our Cloud project.
We can modify the VMs we've created, create new ones,
delete some of the existing ones, and a lot more.
[For our example, we'll use it to create five additional VMs.]
It goes like this.
First, we call gcloud, then we pass the compute parameter that's used for
everything that has to do with virtual machines.
Then we pass the instances parameter,
as we'll be dealing with the VM instances themselves.
So then, we pass create, as we want to create instances.
We'll see that we want to use the source instance template called
web server- template.
And finally, we'll give the name of the instances that we want to deploy.
Let's call them ws1, ws2, ws3, ws4, and ws5.

[$ gcloud compute instances create --source-instance-template webserver-template ws1 ws2 ws3 ws4 ws5]
[$ gcloud compute instances create --source-instance-template web-server-gcloud-1 ws1 ws2 ws3 ws4 ws5]

It takes only a short while until all instances are created.
This is definitely much faster than going through the web interface, and
much easier to automate through our scripts.
And with that, we've seen how we can create a virtual machine, customize it,
create a template out of it, and
use that template to create a bunch of new identical virtual machines.
I hope you're starting to see how useful this can be when creating new
IT deployments.
Up next, there's a reading where you'll find a bunch more information about
all the tools that we've demonstrated, and
then a quick quiz to practice everything that you've just learned. 

[*Caption:"Managing VMs in GCP":05*]

Over the last few videos we learned how to create and use virtual machines running on GCP. We then explored how we can use one VM as a template for creating many more VMs with the same setup. You can find a lot more information about this in the following tutorials:

    [https://cloud.google.com/compute/docs/quickstart-linux]
    [https://cloud.google.com/compute/docs/instances/create-vm-from-instance-template]
    [https://cloud.google.com/sdk/docs]

[*Caption:"The End":06*]
