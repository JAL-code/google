[we were never telling the computer the steps it should follow in order to do what we wanted.]
[just declaring the end goal]
[providers that we mentioned earlier lake apt and yum are the ones in charge of turning our goals into whatever actions are necessary.]
[Puppet uses a declarative language because we declare the state that we want to achieve rather than the steps to get there.]
[Traditional languages like Python or C are called procedural because we write out the procedure that the computer needs to follow to reach our desired goal.]
[Just remember that when it comes to configuration management, it makes sense to simply state what the configuration should be, not what the computer should do to get there.]
[you only care that after the configuration management tool has run, the package is installed.]
[In this context, an idempotent action can be performed over and over again without changing the system after the first time the action was performed, and with no unintended side effects.]
[example_w1_q3_03_01.bash]
[Fulfilling this requirement is an idempotent operation.]
[If the file doesn't exist, then puppet will create it.]
[If the contents or permissions don't match, Puppet will fix them.]
[No matter how many times the agent applies the rule, the end result is that this file will have the requested contents and permissions.]
[If a script is idempotent, it means that it can fail halfway through its task and be run again without problematic consequences.]
[If your automation is idempotent, you can add the missing disk and then have the system pick up from where it left off.]
[An exception to this is the *exec resource, which runs commands for us.]
[So if we need to use the exec resource to run a command for us, we need to be careful to ensure that the action is idempotent.]
[We could do that for example by using the *onlyif attribute like this.]
[example_w1_q3_03_02.bash]
[only if the file that we want to move exists.]
[Another important aspect of how configuration management works is the *test and repair paradigm*.  ]
[Finally, another important characteristic is that Puppet is stateless, this means that there's no state being kept between runs of the agent.]
[The Puppet master generates the rules based just on those facts, and then the agent applies them as necessary.]
[*Caption:"More Information About Configuration Management":03]
[https://en.wikipedia.org/wiki/Domain-specific_language]
[http://radar.oreilly.com/2015/04/the-puppet-design-philosophy.html]
[Puppet is declarative, idempotent, and stateless]
[In some cases violation of these design ideals is unavoidable]
[Write declarative, idempotent, and stateless code whenever possible]
[The configuration is inherently self healing]
[State does not need to be maintained between invocations]
