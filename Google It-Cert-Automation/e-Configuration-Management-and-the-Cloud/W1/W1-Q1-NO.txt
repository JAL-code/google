[*Caption:"Course Introduction":001*]

Say you're in charge of a fleet of servers.
Everything is full steam ahead,
until one day you discover that there's
a security vulnerability in one of the applications used.
Now, you need to upgrade
all the servers to the latest version.
If you have 10 servers in the fleet,
it's probably not too much trouble
to log into each one of
them one after the other and install the new version.
But what if you have 100 servers?
This would get super boring and you'd
likely end up making mistakes,
leaving some servers with the wrong version installed.
Now, imagine having to do this on 1000 servers.
There's no way you're going to log into
each of them to upgrade the software.
So what can you do instead?
[In this course, we'll look into how we can apply
automation to manage fleets of computers.]
We'll learn how to automate deploying new computers,
keep those machines updated,
manage large-scale changes, and a lot more.
[We'll discuss managing both physical machines running in
our offices and virtual machines running in the Cloud.]
If this sounds overwhelming, don't worry,
I'll go step-by-step with you along the way.
[I'm Phil ?? , and I'm
a Site Reliability Engineer at
Google working on the team that supports G-mail.]
If you've never heard about
Site Reliability Engineering before,
let me tell you a bit about what we do.
[SRE is focused on the reliability and
maintainability of large systems.]
We apply tons of automation techniques to manage them.
This let's teams with only a handful
of engineers have a big impact,
[scaling our support as our service grows.]
We're [small, but mighty.]
My job includes a lot of different tasks.
[Sometimes I spend my time collaborating with
partner teams on the reliability aspects
of a cool new feature,
like scheduling emails to send at a later time on G-mail.]
Other days, I [write software,
creating tools that help
automate how we manage the service.]
When I'm not doing that,
I might [do research or
architectural design for a new project.]
I'm also part of the[ on-call rotation for the service.]
If problems come up when I'm on call,
I'm in [charge of fixing them or
finding the right person to fix them if I can't.]
So what will we cover in this course?
We'll start by looking into
an [automation technique called configuration management,]
which [lets us manage
the configuration of our computers at scale.]
Specifically, we'll learn [how to use Puppet,
the current industry standard
for configuration management.]
We'll look at some simple examples,
and then see how we can apply
the same concept to more complex cases.
You'll be a Puppet master in no time.
Later on, we'll expand
our automation skills by looking into
how we can make use of the Cloud to
help us scale our infrastructure.
[We'll learn about the benefits and
challenges of moving services to the Cloud.]
We'll check out some of the best practices for
handling hundreds of virtual
machines running in the Cloud,
how to adapt our services to that,
and how to troubleshoot them
when things don't go according to plan.
Heads up, they rarely do.
Before we move on, I should
probably tell you a little bit about myself.
I discovered I was interested in
IT and technology as a teenager.
So when I decided to enlist
in the Navy right after high school,
I signed up to be an
Information Systems Technician there.
[I served in the Navy for four years supporting
IT and networks resources around the world.]
After leaving the Navy,
I went to college and then joined
[Google in the IT support department.]
The transition from working in
a very structured environment like
the military to a place like Google
was initially a bit hard to wrap my head around.
I had to become much more comfortable in dealing with
[ambiguity in the problem spaces that I was working in,]
which meant learning to trust
my own sense of judgment and prioritization.
All along the way, I kept learning
new skills and growing as a person and an engineer.
So I'm excited to be here to help
you take the next step in your IT career,
to help you keep growing
your automation skills by learning
how to manage fleets of
computers using configuration management,
and how to work with the Cloud.
[Modern IT is moving more and more
towards Cloud-based solutions and having
a solid background in how to manage them will be
even more critical for IT professionals in the future.]
In this course, we'll use [Qwiklabs which is
an environment that allows you to test
your code on a virtual machine running in the Cloud.]
This lets you experience real-world scenarios,
where you'll need to interact with
one or more remote systems to achieve your goal.
We'll build on top of the many tools
that you've learned about throughout the program,
like [using Python for automation scripts,
using Git to store versions of code,
or figure out what's going on when
a program doesn't behave as expected.]
You'll see some complex topics and videos that
may not 100 percent sink in the first time around.
That's totally natural.
Take your time and re-watch the videos a few
times if you need to, you'll get the hang of it.
Also, remember that you can use the discussion forums to
connect with your fellow learners and
ask questions anytime you need.
We're about to begin our journey,
learning how we can apply automation at large scale.
So let's get started. 

[*Caption:"Intro to Module 1- Automating with Configuration Management":01*]

No matter the size of your team
or the number of computers in your fleet,
knowing how to apply automation techniques will
enable you to do your work much more effectively.
As I shared earlier, I'm part of
the Site Reliability Engineering
team that supports Gmail.
My team is relatively small
but the service is pretty big.
Without scaling our efforts
through automation and tooling,
it would be impossible to help Gmail
meet its reliability goals.
While you're probably not supporting
such a large-scale service right now,
you'll definitely benefit from using
the right automation for your needs.
Being able to automate the installation of new software,
the provisioning of new workstations
or the configuration of
a new server can make a big difference
even when you're the only person in your IT department.
In the coming videos,
we'll kick things off by looking at
some important automation concepts,
[like what we mean when we talk about scale and how we can
use configuration management to
maintain the computers in our fleet,
and how we can all benefit from
treating our infrastructure as code.]
These concepts are the building
blocks for letting us manage
a growing number of devices
without having to grow the team in charge of them.
[We'll then get to our first taste of Puppet,
the configuration management tool
that we'll be teaching you throughout this course.]
We'll check out a bunch of different examples
to see what Puppet rules look like.
We'll also learn about the underlying concepts and
how you can get it to do the heavy lifting for you.
The concepts that we'll check out
throughout this module will help you
take your first steps and automating at a larger scale.
Knowing how to automatically
manage the configuration of the devices in
your fleet will let your team handle
a lot more work with the same amount of people.
It also frees up time to do
more interesting stuff since
all the boring tasks can get automated.
By the end of the module,
you'll have the skills to fix
a bug in existing automation,
which is great news since that's
exactly what you're going to do with code you provide.
Funny how that works, isn't it?
Almost like we planned it. Let's dive in. 

[*Caption:"What is scale?":02*]

In this course we'll focus on making our work scale.
So what do we mean when we talk about scale?
[Being able to scale what we do means that we can keep achieving larger impacts
with the same amount of effort when a system scales.]
Well an increase in the amount of work it needs to do can be
accommodated by an increase in capacity.
For example, if the web application your company provides is scalable,
that it can handle an increase in the number of people
using it by adding more servers to serve requests.
[In short, a scalable system is a flexible one.]
Adding more computers to the pool of servers that are serving the website can
be a very simple or
very hard operation depending on how your infrastructure is set up.
To figure out how scalable your current setup is, you can ask yourself
questions like [will adding more servers increase the capacity of the service?]
[How are new servers prepared, installed, and configured?]
[How quickly can you set up new computers to get them ready to be used?]
[Could you deploy a hundred servers with the same IT team that you have today?]
[Or would you need to hire more people to get it done faster?]
[Would all the deployed servers be configured exactly the same way?]
Scaling isn't just about website serving content of course.
[If your company is rapidly hiring a lot of new employees,
you'll need to have an onboarding process that can scale as needed.]
And as you keep adding new computers to the network, you'll need to make sure that
your system administration process can scale to the growing needs of the company.
This can include tasks like a [applying the latest security policies and
patches while making sure users' needs still get addressed all while more and
more users join the network without new support staff to back you up.]
If making this happen sounds a bit like magic right now,
remember that we're here to share the secret ingredient with you, automation.
[Automation is an essential tool for
keeping up with the infrastructure needs of a growing business.]
By using the right automation tools,
we can get a lot more done in the same amount of time.
[For example, we could deploy a whole new server by running a single command and
letting the automation take care of the rest.]
[We could also create a batch of user accounts with all the necessary
permissions based on data already stored in the database,
eliminating all human interaction.]
Automation is what lets us scale.
It allows a small IT team to be in charge of hundreds or
even thousands of computers.
Okay, so what does that look like in practice?
There's a bunch of different tools that we can use to achieve this.
Up next, we'll talk about a type of tool called [configuration management that can
help us automate how we manage the computers in our fleets. ]

[*Caption:"What is configuration management?":03*]


Imagine your team is in charge of setting up a new server.
This could be a physical computer running close to you or
a virtual machine running somewhere in the cloud.
To get things moving, the team installs the operating system,
configures some applications and services, sets up the networking stack,
and when everything is ready, puts the server into use.
[By manually deploying the installation and configuring the computer,
we see that we're using unmanaged configuration.]
When we say configuration here,
we're talking about everything from the [current operating system and
the applications installed to any necessary configuration files or policies,
including anything else that's relevant for the server to do its job.]
[When you work in IT, you're generally in charge of the configuration of a lot of
different devices, not just servers.
Network routers printers and
even smart home devices can have configuration that we can control.]
For example, [a network switch might use a config file to set up each of its ports.]
All right, so now we know what we mean when we talk about configuration.
We said that manually deploying a server means that the configuration is unmanaged.
So what would it mean for the configuration to be managed?
[It means using a configuration management system to handle all
of the configuration of the devices in your fleet, also known as nodes.]
There's a bunch of different tools available depending on the devices and
services involved.
Typically you'll [define a set of rules that have to be applied to the nodes you
want to manage and then have a process that ensures that those settings are true
on each of the nodes.]
At a small scale, unmanaged configurations seem inexpensive.
If you only manage a handful of servers,
you might be able to get away with doing that without the help of automation.
You could log into each device and make changes by hand when necessary.
And when your company needs a new database server, you might just go ahead and
manually install the OS and the database software into a spare computer.
But this approach doesn't always scale well.
The more servers that you need to deploy,
the more time it will take you to do it manually.
And when things go wrong, and they often do,
it can take a lot of time to recover and have the servers back online.
[Configuration management systems aim to solve this scaling problem.]
By managing the configuration of a fleet with a system like this,
large deployments become easier to work with [because the system will deploy
the configuration automatically no matter how many devices you're managing.]
When you use configuration management and you need to make a change in one or more
computers, you don't manually connect to each computer to perform operations on it.
[Instead, you edit the configuration management rules and
then let the automation apply those rules in the affected machines.]
This way the changes you make to a system or
group of systems are done in a [systematic, repeatable way.]
[Being repeatable is important because it means that the results will be the same on
all the devices.]
A configuration management tool can take the rules you define and
apply them to the systems that it manages, making changes efficient and consistent.
Configuration management systems often also have some form
of automatic error correction built in so
that they can recover from certain types of errors all by themselves.
For example, say you found that [some application] that was being
used widely in your company was configured [to be very insecure.]
You can [add rules to your configuration management system to improve the settings
on all computers.]
And this won't just apply the more secure settings once.
[It will continue to monitor the configuration going forward.]
If a [user changes the settings on their machine, the configuration management
tooling will detect this change and reapply the settings you defined in code.]
How cool is that?
There are lots of configuration management systems available in the IT
industry today.
Some popular systems include [Puppet, Chef, Ansible, and CFEngine.]
These tools can be used to manage locally hosted infrastructure.
[Think bare metal or virtual machines, like the laptops or
work stations that employees use at a company.]
Many also have some kind of [Cloud integration allowing them to manage
resources in Cloud environments like Amazon EC2, Microsoft Azure, or
the Google Cloud platform, and the list doesn't stop there.]
There are some [platform specific tools, like SCCM and Group Policy for Windows.]
These tools can be very useful in some [specific environments,
even when they aren't as flexible as the others.]
For this course, we've chosen to focus on [Puppet because it's the current industry
standard for configuration management.]
Keep in mind though that [selecting a configuration management system is a lot
like deciding on a programming language or version control system.]
You should pick the one that best fits your needs and adapt accordingly,
if necessary.
[Each has its own strengths and weaknesses.]
So a little research beforehand can help you decide which system is best suited for
your particular infrastructure needs.
There are a lot of tools out there.
So be sure to check them out.
Up next, we'll discuss how we can make the most out of our configuration management
system using the infrastructure as code paradigm. 

[*Caption:"What is infrastructure as code?":04*]

We've called out that [when we use
a configuration management system,
we write rules that describe how
the computers in our fleet should be configured.]
These rules are then executed by the automation,
to make the computers match our desired state.
This means that we can [model
the behavior of our IT infrastructure
in files that can be processed by automatic tools.]
These files can then be
[tracked in a version control system.]
Remember, version control systems help us
keep [track of all changes ]done to the files,
helping [answer questions like who, when, and why.]
More importantly, they're super-useful
when we need to [revert changes.]
This can be especially helpful
if a change turns out to be problematic.
The paradigm of storing
all the configuration for the managed devices in
version controlled files is known as
[Infrastructure as Code or IaC.]
[In other words, we see that we're
using Infrastructure as Code when all of
the configuration necessary to deploy and manage
a node in the infrastructure
is stored in version control.]
This is then [combined with automatic tooling
to actually get the nodes provisioned and managed.]
If you have all the details of
your Infrastructure properly stored in the system,
[you can very quickly deploy
a new device if something breaks down.]
Simply get a new machine,
either virtual or physical,
use the automation to deploy
the necessary configuration, and you're done.
[The principals of Infrastructure as Code are
commonly applied in cloud computing environments,
where machines are treated like
interchangeable resources, instead
of individual computers. ][This principle
is also known as
treating your computers as cattle
instead of pets because you care for
them as a group rather than individually.]
Apologies to anyone with a pet cow.
This concept isn't just for managing computers in
huge data centers or globe spanning infrastructures,
it can work for anything;
[from servers to laptops,
or even workstations in a small IT department.]
Even if your company only has
a single computer working as the mail server,
you can still benefit from
storing all the configuration needed
to set it up in a configuration management system.
That way if the server ever stops working,
you can deploy a replacement very quickly by simply
applying the rules that configure
the mail server to the new computer.
[One valuable benefit of
this process is that the configuration
applied to the device doesn't depend on
a human remembering to follow all the necessary steps.]
Rest assured, silly human,
the result will always be the same,
making the [deployment consistent.]
As mentioned, having Infrastructure as
Code means that we can also apply
the benefits of the version control system
or VCS to your infrastructure.
[Since the configuration of
our computers is stored in files,
those files can be added to a VCS.]
This has all the benefits
that version control systems bring.
It gives us [an audit trail of changes,]
it lets us[ quickly rollback if a change was wrong,]
it lets [others reviewed
our code to catch errors and distribute knowledge,]
it [improves collaboration with the rest of the team,]
and it lets us [easily check out the state of
our infrastructure by looking
at the rules that are committed.]
Not too shabby. I personally think
this is one of the coolest things about IaC.
The [ability to easily see what configuration changes were
made and roll back to
a known good state is super important.]
It can make a big difference in
quickly recovering from an outage,
especially since changing the contents
of the configuration file
can be as dangerous as
updating the version of an application.
[I've had my fair share of outages caused by
an innocent-looking change with unintended side effects.]
But storing all the infrastructure in
a version control system lets me quickly roll back
to a previously known good version
so that the outage length can be minimized.
[On top of that,
having the rules stored in files means that we
can also run automated tests on them.]
It's much better to find out in a test that
a configuration file has a typo in
it than to find out from our users.
[In a complex or large environment,
treating your IT Infrastructure as Code can help you
deploy a flexible scalable system.]
A configuration management system
can help you manage that code by providing
a platform to maintain and provision
that infrastructure in an automated way.
Having your infrastructure stored
as code means that you can
automatically deploy your infrastructure
with very little overhead.
If you need to move it to a different location,
it can be deployed,
de-provisioned, and redeployed at scale
in a different locale with minimal code level changes.
[To sum all of this up,
managing your Infrastructure as Code it
means that your fleet of nodes are consistent,
versioned, reliable, and repeatable.]
Instead of being seen as precious or unique,
[machines are treated as replaceable resources that
can be deployed on-demand through the automation.]
Any infrastructure that claims to be scalable
must be able to handle
the capacity requirements of growth.
[Performing an action like adding more servers to handle
an increase in requests is just a possible first step.
There are other things that we
might need to take into account,
such as the amount of traffic that network can
handle or the load on
the back end servers like databases.]
Viewing your infrastructure in this way helps
your IT [team adapt and stay flexible.]
The technology industry is
constantly changing and evolving.
Automation and configuration management can help you
embrace that change instead of avoiding it.
Before diving into concrete examples
of what this looks like,
the first practice quiz of the course is coming up.
These quizzes act as
check-in points to help you make sure
all the concepts covered in the videos are
making sense. See you on the other side. 

[*Caption:"The End":06*]

