[Problems on the provider side tend to be isolated to geographical regions. If you're seeing weird problems and you have no idea what could be going on, you can try bringing up your service in a different region and checking if the failure happens there too.]
[issue with the cloud infrastructure and you should bring it up with your provider.]
[If it fails in the other regions too, it's likely that it's a problem with your system.]
[if you're seeing problems related to resource usage, you can try running the same system in a different machine type and checking how it behaves there.]
[your service takes too much time to process incoming requests.]
[Another option that we've mentioned a bunch is doing rollbacks for the pieces that have recently changed.]
[When setting up your service, you should make sure that you can deploy and roll back each individual piece.]
[By rolling back to the previous version, you can verify if that change was at fault or not.]
[If the server's are still using a lot of memory after the rollback, it means something else is up.]
[one popular option when running things on the cloud called containers.]
[Containers are packaged applications that are shipped together with their libraries and dependencies.]
[application is executed in a separate container, completely independent of any other applications running on the same machine.]
[deploy the same container to your local workstation to a server running on-premise or to cloud infrastructure provided by different vendors.]
[ deploy the container somewhere else and check if it behaves the same way.]
[When using containers, the typical architecture is to have a lot of small containers that take care of different parts of the service.]
