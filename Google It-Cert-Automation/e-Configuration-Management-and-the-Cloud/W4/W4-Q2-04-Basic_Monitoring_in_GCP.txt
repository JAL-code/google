[For this demonstration, we'll use the monitoring tool called Stackdriver,]
[the monitoring console, we see an overview of the system.]
[configure this dashboard to show the charts that we consider the most useful.]
[To do this, we'll create a new alerting policy.]
[configure the condition that triggers the alert.]
[configure how we want to be notified of the issue and add any documentation that we want the notification to include.]
[start by configuring the condition.]
[want to be notified when the metric indicates that there's a problem with an instance.]
[an alert that triggers if an instance in CPU utilization is more than 90 percent.]
[selecting that we want to monitor GCE, VM instances, which are the instances that we currently have running and then select the CPU utilization metric.]
[we could choose to only look at some of the instances, selecting by their zone, region, or name.]
[separate alerts for instances used for production, and those used for testing or development.]
[choose an aggregator for the data, these aggregators are useful when the metrics that you're collecting are about the overall system and not just one instance.]
[checking the number of error responses that your system generated, you want to sum all the errors across instances.]
[use these values to decide if we should trigger the alert or not.]
[next step is selecting how many of the different time series need to violate the condition for the alert to trigger.]
[trigger the alert when one, some, or all of the different time series violate the condition.]
[configure our alert to trigger if any instance is using more than 90 percent of the CPU.]
[alert to trigger if the value is above 90 percent for one minute.]
[select how we want to get the notification and when the alert triggers.]
[only type of notification that we can use is e-mail.]
[e-mail will do.]
[add extra documentation to our alert.]
[Including good documentation here, it can be super-important when you've got a bunch of different people working together in a team and not everyone knows everything.]
[good documentation are much easier to tend to and help get the service back to a healthy state faster.]
[give a name to our alerting policy, we'll call it CPU and then save it.]
[For the final part of this demo, we want to show what happens when the alert triggers.]
[Let's stop the process that's using all of our instances CPU.]
[top process from before. Let's exit with Q.]
[foreground by typing fg,]
