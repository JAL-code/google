[how to keep it running.]
[But we can make changes in a controlled and safe way. This is called change management, and it's what lets us keep innovating while our services keep running.]
[Step one in improving the safety of our changes, we have to make sure they're well-tested.]
[running unit tests and integration tests, and then running these tests whenever there's a change.]
[continuous integration, or CI,]
[A continuous integration system will build and test our code every time there's a change.]
[runs even for changes that are being reviewed.]
[before they're merged into the main branch.]
[open source CI system like Jenkins, or if you use GitHub, you can use its Travis CI integration.]
[CI means the software is built, uploaded and tested constantly.]
[Now you can use continuous deployment, or CD, to automatically deploy the results of the build or build artifacts.]
[Continuous deployment lets you control the deployment with rules.]
[configure our CD system to deploy new builds only when all of the tests have passed successfully.]
[configure our CD to push to different environments based on some rules.]
[should have a test environment separate from the production environment.]
[validate that changes work correctly before they affect users.]
[environment means everything needed to run the service.]
[includes the machines and networks used for running the service, the deployed code, the configuration management, the application configurations, and the customer data.]
[Production, usually shortened to prod, is the real environment, the ones users see and interact with.]
[protect, love, and nurture a prod.]
[The test environment needs to be similar enough to prod that we can use them to check our changes work correctly.]
[could have your CD system configured to push new changes to the test environment.]
[check that the service is still working correctly there, and then manually tell your deployment system to push those same changes to production.]
[For example, you might have your CD system push all new changes to a development or dev environment, then have a separate environment called pre-prod, which only gets specific changes after approval.]
[And only after a thorough testing, these changes get pushed to pro.]
[You want to deploy it to one of those testing or development environments to make sure it works correctly before you ship it to prod.]
[these environments need to be as similar to prod as possible.]
[built and deployed in the same way.]
[In A/B testing, some requests are served using one set of code and configuration, A, and other requests are served using a different set of of code and configuration, B.]
[where a load balancer and instance groups can help us out.]
[deploy one instance group in your A configuration and a second instance group in your B configuration. Then by changing the configuration of the load balancer, you can direct different percentages of inbound requests to those two configurations.]
[Heads up, make sure you have basic monitoring so that it's easy to tell if A or B is performing better or worse.]
[value of A/B testing is lost to A/B debugging.]
[Remember what we discussed in an earlier course about post-mortems. We learn from failure and we build the new knowledge into our change management.]
[Can I have one of my change management systems look for problems like that in the future? Can I add a test or a rule to my unit tests, my CI/CD system, or my service health checks to prevent this kind of failure in the future?]
