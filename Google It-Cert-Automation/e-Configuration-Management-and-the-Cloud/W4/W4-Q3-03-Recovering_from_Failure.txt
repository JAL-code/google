[If we want our service to be reliable, we need to make sure that we can get it up and running as quickly as possible when bad things happen.]
[good backups and a well-documented recovery plan.]
[backups for the different pieces of your infrastructure, including the instances that are running the service and the network that's used to connect to the service.]
[If you operate a service that stores any kind of data, it's critical that you implement automatic backups and that you periodically check that those backups are working correctly by performing restores.]
[If you store all your Infrastructure as code, you already have a backup of what your infrastructure should look like.]
[That's why many teams keep backup or a secondary instances of their services already up and running.]
[problem with the primary instance, they can simply point the load balancer or the DNS entries to the secondary instance with minimal disruption to the service.]
[so that if one of them goes down, the others can still handle the traffic, or on a larger scale, have the service running on different data centers around the world, so that if one of the data centers has a problem, the service can still be provided by the instances running in the other data centers.]
[ two different connections to the Internet. This way, if the connection offered by one of your ISPs goes down, you can still connect to the Internet through the other one.]
[running on Cloud, you can mostly rely on your Cloud provider having enough network redundancy.]
[you might want to run your service on two different Cloud vendors so that if one of the providers has a large outage, you can still rely on the other.]
[First step, deep breath, don't panic. You need to recover your service from scratch, deploying it in a different data center and getting all your data from backups.]
[As long as the backups are available in other data centers and your Infrastructure is fully stored in a version control system, this should be possible.]
[Instead, you should have a documented procedure that explains all of the steps that you need to take.]
[One way to do that is to once in a while pretend that you need to recover your service, follow the documented steps, and check if anything is missing or outdated.]
[Systems will fail.]
[automatic backups, well-doc disaster recovery plan, multiple points of reduncancy.]
