dir
dir\
dir/
ls -d
exit()
import PIL.image
import PIL.Image
image=PIL.Image("vancover.jpg")
image = PIL.Image("vancover.jpg")
image = PIL.Image.open("vancover.jpg")
image = PIL.Image.open("house.jpg")
image = PIL.Image.open("vancover.jpg")
image = PIL.Image.open("/user/pi/vancover.jpg")
dir
os.getcwd()
import os
currentdirectory = os.getcwd()
print(currentdircctory)
print(currentdirectory)
image = PIL.Image.open("/home/pi/vancover.jpg")
image = PIL.Image.open("/home/pi/vancover.jpeg")
print(image.size)
print(image.format)
exit()
import pandas
visitors = [5, 78, 123, 34, 135]
errors = [0, 10, 17, 3, 22]
df = pandas.DataFrame( {"visitors": vistors, "errors": errors}, index = ["Mon", "Tues", "Wed", "Thur", "Fri"])
df = pandas.DataFrame( {"visitors": visitors, "errors": errors}, index = ["Mon", "Tues", "Wed", "Thur", "Fri"])
print(df)
exit
python --v
python --V
python --help
python -V
python -v
python --help
exit()
"hello " * 10
cat hello_world.py
cat hello_world
cat hello_world.py
exit()
import areas
areas.circle(4)
exit()
import csv
hosts = [["workstation.local", "198.168.25.46"],["webserver.cloud","10.25.6"]]
with open('hosts.csv', 'w') as hosts_csv:
writer = csv.writer(hosts_csv)
  writer = csv.writer(hosts_csv)
    writer = csv.writer(hosts_csv)
     writer = csv.writer(hosts_csv)
    writer = csv.writer(hosts_csv)
exit(0
exist()
exit()
import csv
hosts = [["workstation.local", "198.168.25.46"],["webserver.cloud","10.25.6"]]
with open('hosts.csv', 'w') as hosts_csv:
    writer = csv.writer(hosts_csv)
    writer.writerows(hosts)
e
print(re.search(r"[Pp]ython", "Python"))
module re
import re
print(re.search(r"[Pp]ython", "Python"))
print(re.search(r"[a-z]"way", "The end of the highway"))
print(re.search(r"[a-z]way", "The end of the highway"))
print(re.search(r"[a-z]way", "What a way to go"))
print(re.search(r"cloud[a-zA-Z0-9]", "Cloaudy"))
print(re.search(r"cloud[a-zA-Z0-9]", "Cloaud9"))
print(re.search("cloud[a-zA-Z0-9]", "Cloud9"))
print(re.search("cloud[a-zA-Z0-9]", "cloud9"))
print(re.search(r"[a-zA-Z]", "THis is a sentence with spaces."))
print(re.search(r"[^a-zA-Z]", "This is a sentence with spaces."))
print(re.search(r"[^a-zA-Z ]", "This is a sentence with spaces."))
print(re.search(r"cat|dog", "I like cats."))
print(re.search(r"cat|dog", "I like dogs."))
print(re.search(r"cat|dog", "I like both dogs and cats."))
print(re.findall(r"cat|dog", "I like both dogs and cats."))
print(re.search(r"Py.*n", "Pygmalion"))
print(re.search(r"Py.*n", "Python Programming"))
print(re.search(r"Py[a-z]*n", "Python Programming"))
print(re.search(r"Py[a-z]*n", "Py"))
print(re.search(r"Py[a-z]*n", "Pyn"))
print(re.search(r"o+l+", "goldfish"))
print(re.search(r"o+l+", "woolly pool"))
print(re.search(r"o+l+", "troll pool"))
print(re.search(r"o+l+", "trolling  pool"))
print(re.search(r"o+l+", "boil"))
print(re.search(r"[Aa][a-z ]*[Aa]", "A is for apple"))
print(re.search(r"[Aa][a-z ]*[Aa]", "Animal Kingdom"))
print(re.search(r"p?each", "To each their own")
print(re.search(r"p?each", "To each their own"))
print(re.search(r"p?each", "I lke peaches"))
print(re.search(r".com", "welcome"))
print(re.search(r"\.com", "welcome"))
print(re.search(r"\.com", "mydomain.com"))
print(re.search(r"\w*", "This is an example"))
print(re.search(r"\w*", "And_this_is_another"))
print(re.search(r"A.*a", "Argentina"))
print(re.search(r"A.*a", "Azerbaija"))
print(re.search(r"^A.*a$", "Azerbaija"))
print(re.search(r"^A.*$a", "Azerbaija"))
print(re.search(r"^A.*$a", "Australia")
print(re.search(r"^A.*$a", "Australia"))
print(re.search(r"^A.*a$", "Australia"))
print(re.search(r"^A.*a$", "Australian"))
pattern = r"^[a-zA-Z_][a-zA-Z0-9_]*$"
print(re.search(pattern, "_this_is_a_valid_variable_name"))
print(re.search(pattern, "this isn't a valid variable"))
print(re.search(pattern, "my_variable1"))
print(re.search(pattern, "1my_variable1"))
import docx
exit()
import re
result = re.search(r"\w*), (\w*)$", "Lovelace, Ada")
result = re.search(r"(\w*), (\w*)$", "Lovelace, Ada")
print(result)
print(result.groups())
print(result[0])
print(result[1])
print(result[2])
("{} {}".format(result[2], result[1])
)
def rearrange_name(name):
    result = re.search(r"^(\w*), (\w*)$", name)
    if result is None:
            return nane
    return "{} {}".format(result[2], result[1])
rearrange_name("Lovelace, Ada")
rearrange_name("Ritchie, Dennis")
rearrange_name("Hopper, Gracie M.")
exit()
import rearrange_name
exit()
import rearrange_name
exit()
import rearrange_name
exit()
import rearrange_name
rearrange_name("Hopper, Grace M.")
print(rearrange_name("Hopper, Grace M."))
exit()
