[MUSIC]
[To look at logs on Linux will open the system log files and VAR log or the user log files and dot accession errors file.]
[On Mac OS we generally use the console app to look at logs]
[the event Viewer on Windows.]
[most logs have a date and time for each line logged]
[cryptic message and you have no idea what it means.]
[we can try to find out more info by enabling sling debug logging.]
[we can get a better idea of what's actually causing the problem.]
[In that case we need to use tools that let us see what going on inside the program.]
[On Linux we use S Trace to see what system calls a programs doing.]
[dtruss on Mac OS]
[By tracing which system calls a program is doing we can see what files and directories it's trying open what network connections it's trying to make and what information it's trying to read or write.]
[We could find that the problem is caused by a resource not being present that the program expects to be present.]
[Or the program tries to open a file but the user running the software doesn't have the necessary permissions.]
[If the application used to work fine and recently started crashing. It's useful to look into what changed in between.]
[first thing is to check if the issue is caused by a new version of the application itself.]
[bug in the new version ]
[no longer supported]
[library or service used by our application changed and they no longer work well together]
[configuration change in the overall environment.]
[system log we can check which programs and libraries were recently updated checking for configuration changes might be harder depending on how you manage that configuration.]
[settings are managed through a configuration management system and the values are stored in a Version Control System. Then you might be able to look at the history of changes and figure out which one triggered the failure.]
[reproduction case for a problem that we're trying to solve. When we're trying to debug an application that crashes finding a reproduction case can help us both understand what's causing the crash and figure out what we can do to fix it.]
[This includes the overall system environment the specific application configuration the inputs to the application the outputs generated by the application the resources that uses and the services it communicates with.]
[clean slate and slowly put the pieces in place until the crash triggers.]
[default configuration instead of the local one]
[freshly installed computer instead of the computer where it's crashing.]
[reproduction case as small as possible]
[end up unable to fix the issue having a small and simple reproduction case is extremely helpful in reporting a bug to the program's developers.]
[So to sum this up to find the root cause of a crashing application will want to look at all available logs figure out what changed trace the system or library calls the program makes and create the smallest possible reproduction case.]
[The strategy for fixing problems will depend on whether we can fix the code or not.]
[*Caption:"What to do when you can't fix the program?":05*]
[It could be that we're dealing with proprietary software]
[we might have access to the source code but it's written in a language that we don't understand and so we can't change it. No matter the reason,]
[You'll need to figure out a way of working around the problem and avoiding the crash.]
[YAML format.]
[This type of compatibility layer is called a Wrapper.]
[A Wrapper is a function or program that provides a compatibility layer between two functions or programs so they can work well together.]
[possibility you might need to look at is if the overall system environment is it working well with the application.]
[check what environment the applications developers recommend and then modify your systems to match that. This could be running the same version of the operating system using the same version of the dynamic libraries or interacting with the same back end services.]
[Say the application was developed and tested on Windows 7, if you run into problems while trying to run it under Windows 10,]
[or if the application was developed and tested for Ubuntu and you're having trouble running it under Fedora, you might want to try running it on Ubuntu instead,]
[In this case, you might want to consider running the application inside a virtual machine or maybe a container.]
[All you need to know right now is they both let you run the affected application in its own environment without interfering with the rest of the system.]
[To do this, we can deploy a watchdog. This is a process that checks whether a program is running and when it's not starts the program again.]
[write a script that stays running in the background and periodically checks if the other program is running. Whenever the check fails the watchdog will trigger the program to restart.]
[ensure that the service is available.]
[This works well for services where availability matters more than running continuously and no matter how you work around the issue, remember to always report the bug to the application developers.]
