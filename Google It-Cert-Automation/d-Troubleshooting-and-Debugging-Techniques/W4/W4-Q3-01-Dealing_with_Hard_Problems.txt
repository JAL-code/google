[So if you're as clever as you can be when you write it, how will you ever debug it?]
[This is a warning against writing complicated programs.]
[It's important to focus on building systems and applications that are simple and easy to understand.]
[One piece of advice I found really valuable is to develop code in small, digestible chunks.]
[Another lesson that's super useful is to keep your goal clear.]
[If you're writing code, try writing the tests for the program before the actual code to help you keep focus on your goal.]
[having documentation that states what the end goal should be, and the steps you took to get there can be really helpful.]
[both keep you on track, and figure out any problems that might turn up along the way.]
[worst part of troubleshooting and debugging is when we get stuck.]
[If you're in a sticky situation, the main thing to do is to remain calm.]
[There's a technique called rubber duck debugging, which is simply explaining the problem to a rubber duck.]
[force ourselves to explain a problem,]
[ask others for help.]
[the better answer is to ask someone who has done it before, to save time and frustration.]
[be careful not to tell them what you think the root cause of the issue might be.]
