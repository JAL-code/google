[*Caption:"It Doesn't Work":01*]
[the first step to solving a problem is getting  enough information so that we  can understand the current state of things]
[know  what the actual issue we're solving is]
[some common questions that we can  ask a user that simply report something doesn't work]
[What were you trying to do?]
[What steps did you follow?]
[What was the expected result?]
[What was the actual result?]
[save time and can  start asking more specific questions right away]
[check if it's  correctly plugged in]
[Say you got a call from a user  that tells you the internal website used  by the sales team to track  customer interactions doesn't work]
[What were they trying to do?  The user tells you that they're  trying to access the website.  What steps did they follow?  They tell you that they opened the website  URL and entered their credentials.  What was the expected result?  They expected to see the sales system's landing page.  What did they get instead?  The web page just keeps loading.  It stays blank forever. ]
[Now that you have a basic idea of what the problem is,  it's time to start figuring out the root cause.]
[reproduce the issue on your own computer.]
[So you navigate]
[the page just keeps loading,]
[This is enough information that you can tell  the user that you'll work on  it and investigate on your own.  There's no need to keep them on the line.]
[By reproducing the problem on your computer, you've taken a simple and quick action that rules out the user or the user's computer as the cause of the problem.]
[Before jumping into the server  that's hosting the application,  you run a few quick checks to verify if  the problem is isolated to that specific website or not. ]
[You check if your Internet access is working successfully]
[inventory website or  ticketing system are working okay.]
[the inventory website never finishes loading. ]
[It turns out both websites are hosted on the same server.]
[process of elimination, starting with the simplest explanations first and testing those until you can isolate the root cause. ]
[At this point, you know that  website's running on a specific server or failing to  load while the rest of  the systems and the Internet are working correctly. ]
[check  what's going on on that server. ]
[Linux machine,  so you'll connect to it using SSH. ]
[top command  which shows the state of the computer and  processes using the most CPU  and see that the computer is super overloaded. ]
[load average in the first line says 40.]
[load average on Linux shows  how much time a processor is busy in a given minute, heis with one meaning it was busy for the whole minute.]
[four cores, ]
[40 is a really high number. ]
[CPU time is spent in waiting. ]
[processes get  stuck gathering data from the hard drive or the network. ]
[Backing up the data on the system is super important.  But currently, the whole system is unusable. ]
[At this point, you've applied the immediate remediation. ]
[So remember to always have a clear picture of what the problem is before you start solving it.]
[*Caption: Creating a Reproduction Case: 02*]
[A reproduction case is a way to verify if the problem is present or not.]
[pretty obvious.]
[missing directory,]
[login to the website and see the loading page.]
[more complex to discover.]
[application that won't start.]
[on your computer, the application starts just fine.]
[suspect that the problem has to do with something in the user's environment or configuration.]
[It could be problems with the network routing, old config files interfering with a new version of the program, a permissions problem blocking the user from accessing some required resource, or even some faulty piece of hardware acting out.]
[The first step is to read the logs available to you.]
[On MacOs, on top of the system logs, you'd go through the logs stored in the library logs directory.]
[On Windows, you'd use the Event Viewer tool to go through the event logs.]
[error message]
[unable to reach server, invalid file format, or permission denied.]
[error message is super unhelpful like internal system error.]
[The next step is to try to isolate the conditions that trigger the issue.]
[Do other users in the same office also experienced the problem? Does the same thing happen if the same user logs into a different computer? Does the problem happen if the applications config directory is moved away?]
[config directories file.]
[You ask the user to move it away without deleting it, and now the application starts correctly.]
[So you ask the user to send you the contents of that directory.]
[You copy them onto your computer, and the program fails to start.]
[Bingo, you got your reproduction case.]
[Having a clear reproduction case, let's do investigate the issue, and quickly see what changes it.]
[For example, does the problem go away if you revert the application to the previous version? Are there any differences in the strace log, or the ltrace logs when running the application with the bug config and without it?]
[On top of that, having a clear reproduction case, lets you share with others when asking for help.]
[aren't sharing any confidential information]
[report a bug to the applications developers, to ask for help from a colleague, or even to ask for help from an Internet forum about the application if it's publicly available.]
[So when trying to create a reproduction case, we want to find the actions that reproduce the issue, and we want these to be as simple as possible. The smaller the change in the environment and the shorter the list of steps to follow, the better.]
[Once you have a reproduction case, you're ready to move on to the next step, finding the root cause.]
[*Caption: Finding the Root Cause:03*]
[he backup system was blocking the websites from working, and so we mitigated that immediate problem to unblock the user.]
[This could be because the network bandwidth is saturated, the disk transfer is too slow, the hard drive is faulty, or a bunch of other reasons.]
[We also didn't do anything to make sure our backups could run successfully in the future.]
[We generally follow a cycle of looking at the information we have, coming up with a hypothesis that could explain the problem, and then testing our hypothesis.]
[If we confirm our theory, we found the root cause.]
[If we don't, then we go back to the beginning and try different possibility.]
[To get inspired, we look at information we currently have and gather more if we need. Searching online for the error messages that we get or looking at the documentation of the applications involved can also help us imagine new possibilities of what might be at fault.]
[Whenever possible, we should check our hypothesis in a test environment, instead of the production environment that our users are working with.]
[avoid interfering with what our users are doing and we can tinker around without fear of breaking something important.]
[try our code in a newly installed machine, spinning up a test server, using test data, and so on.]
[the extra safety is definitely worth it.]
[it's always a good idea to check if we can reproduce the problem in a test environment before we modify production.]
[On the flip side, if the problem is related to some configuration of either the web services or the backup service, we'd still see it in the test server.]
[start by setting up a test instance of the service and checking if the problem replicates there before touching the production instance.]
[So say we have a test server running the same websites. When we start the backup, we see that the website stop responding.]
[One possible culprit could be too much disk input and output.]
[iotop, which is a tool similar to top that lets us see which processes are using the most input and output.]
[If the issue is that the process generates too much input or output, we could use a command like ionice to make our backup system reduce its priority to access the disk and let the web services use it too.]
[What if the input and output is not the issue?]
[Another option would be that the service is using too much network because it's transmitting the data to be backed up to a central server and that transmission blocks everything else.]
[iftop, yet another tool similar to top that shows the current traffic on the network interfaces.]
[If the backup is eating all the network bandwidth, we could look at the documentation for the backup software and check if it already includes an option to limit the bandwidth.]
[If that option isn't available, we can use a program like Trickle to limit the bandwidth being used.]
[But what if the network isn't the issue either?]
[Another option could be that the compression algorithms selected is too aggressive, and compressing the backups is using all of the server's processing power.]
[solve this by reducing the compression level or using the nice command to reduce the priority of the process and accessing the CPU.]
[If that's still not the case, we need to keep looking, check the logs to see if we find anything that we missed before.]
[Maybe look online for other people dealing with similar problems related to interactions of the backing up software with the web surfing software, and keep doing this until we come up with something that could be causing our problem.]
[*Caption: Dealing with Intermittent Issues: 04*]
[Maybe you've dealt with programs that randomly crash, laptops that sometimes fail to suspend, web services that unexpectedly stop replying, or file contents that get corrupted.]
[bugs that come and go are hard to reproduce, and are extremely annoying to debug.]
[The first step is to get more involved in what's going on, so that you understand when the issue happens and when it doesn't.]
[Since you don't know exactly when the bug will trigger, you need to be thorough with the information that you log.]
[service IAM.]
[It was crashing sporadically, and I was at a loss trying to find out why.]
[Looking at the error message, I knew it had something to do with strings that use special characters, but I had no idea where the bug was exactly.]
[So I added more logging information to the service, around the inputs and the function calls that I suspect could be involved.]
[If you can't modify the code of the program to get more information, check if there's a logging configuration that you can change.]
[a debugging mode that generates a lot more output then the default mode.]
[If that's not possible, you'll need to resort to monitoring the environment when the issue triggers.]
[ look at different sources of information, like the load on the computer, the processes running at the same time, the usage of the network, and so on.]
[occur at random times, we need to repair our system to give us as much information as possible when the bug happens.]
[several iterations until we get enough information to understand the issue, but don't lose hope.]
[This is an especially annoying type of intermittent issue, nicknamed Heisenbug, in honor of Werner Heisenberg.]
[He's the scientist that first described the observer effect, where just observing a phenomenon alters the phenomenon.]
[These bugs usually point to bad resource management.]
[Maybe the memory was wrongly allocated, the network connections weren't correctly initialized, or the open files weren't properly handled.]
[need to just spend time looking at the effected code until we finally figure out what's up.]
[Yet another type of intermittent issue is the one that goes away when we turn something off and on again.]
[power cycling a device or restarting a program gets rid of whichever problem we were trying to fix.]
[almost certainly a bug in the software, and the bug probably has to do with not managing resources correctly.]
[If in the end, we can't find the actual reason, scheduling a restart at a time that's not problematic can also be an option.]
[like isolating causes, understanding error messages, adding logging information, and generating new ideas for possible failures.]
[problems that go away on their own and then pop up again, and looked at how to figure those out.]
[*Caption: Intermittently Failing Script: 05*]
[the program keeps terminating with an error.]
[First, let's try running the program ourselves and check if we can reproduce the problem.]
[It failed to send the email. This means we've reproduced the issue.]
[Again, I'll send this to myself to avoid spaming people with test reminders.]
[Which parameter do you think is at fault?]
[ the date. Let's try it once more with January 13th as the date and Sales All Hands as the title. Another failure.]
[Now, the next step is to find the root cause of the issue.]
[when dates are involved in a failure, the problem is due to how the dates are formatted.]
[let's add more debugging information to the program.]
[Zenity is the application showing the window to select the date, title, and emails.]
[To get more information about the output generated by Zenity, we'd like to see the value of the meeting_info variable before the Python script gets called. Let's add an echo statement to see that.]
[information generated by Zenity is split by pipes, and that the data is formatted as month, day, year.]
[Now, the next step is getting a more informative error.]
[The file is long, so it makes sense to start by looking at the main function that lists the core functionality of the program.]
[But the error message is not very useful, as it's hiding the reasons why things failed.]
[printing the exception that generated the failure.]
[As there's no month 13, this is an invalid date. So we found the root cause of the problem.]
[the next step is to remediate the issue.]
[We could change the program to use our date format, but then the application would break for people running it in a different location.]
[we need to change the Python script to use the same format.]
[We've successfully fixed the issue.]
